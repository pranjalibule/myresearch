/******************************************************************************
 *                          © 2017 SQS India                            *
 *                          All Rights Reserved.                              *
 *                                                                            *
 ******************************************************************************
 *
 * Modification History:
 * 
 * AKS 04Oct2017 Created the class
 *******************************************************************************/

namespace SQS.nTier.TTM.WebAPI.Controllers
{
    using BAL;
    using Common;
    using DTO;
    using GenericFramework;
    using GenericFramework.Utility;
    using Newtonsoft.Json;
    using SQS.nTier.TTM.DAL;
    using System;
    using System.Collections.Generic;
    using System.Web.Http;
    using System.Web.Http.Description;
    using System.Web.Http.Results;

    /// <summary>
    /// TSOStatusController
    /// </summary>
    [RoutePrefix("api")]
    public class TSOStatusController : ApiController
    {
        #region Private Functions

        /// <summary>
        /// GetTSOStatusById
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>TSOStatus</returns>
        private TSOStatusDTO GetTSOStatusById(int id)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            TSOStatusDTO objTSOStatusDTO = null;

            try
            {
                TSOStatus objTSOStatus = objBusinessLayer.TSOStatusRepository.GetByID(id);
                if (null != objTSOStatus)
                {
                    objTSOStatusDTO = new TSOStatusDTO();
                    objTSOStatusDTO = Conversions.ToDTO<TSOStatusDTO, TSOStatus>(objTSOStatus);
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objTSOStatusDTO;
        }

        /// <summary>
        /// GetAllTSOStatus
        /// </summary>
        /// <returns>IList<TSOStatus>></returns>
        private IList<TSOStatusDTO> GetAllTSOStatus(int startingRecordNumber, int pageSize, out int totalRecords)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<TSOStatusDTO> objTSOStatusDTOList = null;
            try
            {
                IList<TSOStatus> objTSOStatusList = objBusinessLayer.TSOStatusRepository.GetAll(startingRecordNumber, pageSize, x => x.ID, false, out totalRecords);
                if (objTSOStatusList != null && objTSOStatusList.Count > 0)
                {
                    objTSOStatusDTOList = new List<TSOStatusDTO>();

                    foreach (TSOStatus objTSOStatus in objTSOStatusList)
                    {
                        TSOStatusDTO objTSOStatusDTO = new TSOStatusDTO();
                        objTSOStatusDTO = Conversions.ToDTO<TSOStatusDTO, TSOStatus>(objTSOStatus);

                        objTSOStatusDTOList.Add(objTSOStatusDTO);
                    }
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objTSOStatusDTOList;
        }

        /// <summary>
        /// Function to add new TSOStatus 
        /// </summary>
        /// <param name="objTSOStatusDTO">TSOStatusDTO</param>
        /// <returns></returns>
        private string AddNewTSOStatus(TSOStatusDTO objTSOStatusDTO)
        {
            string returnMessage = string.Empty;

            LoginSession ls = new LoginSession();
            ls.LoginName = "Admin";

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            try
            {
                TSOStatus objTSOStatus = Conversions.ToEntity<TSOStatusDTO, TSOStatus>(objTSOStatusDTO);
                objBusinessLayer.TSOStatusRepository.Add(objTSOStatus);
                returnMessage = "TSO Status added successfully.";
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return returnMessage;
        }

        /// <summary>
        /// Function to update TSOStatus 
        /// </summary>
        /// <param name="ID">int</param>
        /// <param name="objTSOStatusDTO">TSOStatusDTO</param>
        /// <returns>string</returns>
        private string ModifyTSOStatus(int ID, TSOStatusDTO objTSOStatusDTO)
        {

            string returnMessage = string.Empty;
            LoginSession ls = null;
            IBusinessLayer objBusinessLayer = null;
            try
            {
                TSOStatusDTO objTSOStatusDTOById = this.GetTSOStatusById(ID);

                if (objTSOStatusDTOById != null)
                {
                    ls = new LoginSession();
                    ls.LoginName = "Admin";

                    objBusinessLayer = new BusinessLayer(ls);

                    objTSOStatusDTOById.Name = objTSOStatusDTO.Name;
                    objTSOStatusDTOById.Description = objTSOStatusDTO.Description;

                    TSOStatus objTSOStatus = Conversions.ToEntity<TSOStatusDTO, TSOStatus>(objTSOStatusDTOById);

                    objBusinessLayer.TSOStatusRepository.Update(objTSOStatus);
                    returnMessage = "TSO Status updated successfully.";

                }
                else
                {
                    returnMessage = "TSO Status do not exists.";
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                if (null != objBusinessLayer)
                    objBusinessLayer.Dispose();
            }
            return returnMessage;
        }

        /// <summary>
        /// RemoveTSOStatus
        /// </summary>
        /// <param name="ID">int</param>
        /// <returns>string</returns>
        private string RemoveTSOStatus(int ID)
        {
            string returnMessage = string.Empty;
            LoginSession ls = null;
            IBusinessLayer objBusinessLayer = null;
            try
            {
                TSOStatusDTO objTSOStatusDTOById = this.GetTSOStatusById(ID);

                if (objTSOStatusDTOById != null)
                {
                    ls = new LoginSession();
                    ls.LoginName = "Admin";

                    objBusinessLayer = new BusinessLayer(ls);

                    TSOStatus objTSOStatus = Conversions.ToEntity<TSOStatusDTO, TSOStatus>(objTSOStatusDTOById);
                    objBusinessLayer.TSOStatusRepository.Delete(objTSOStatus);
                    returnMessage = "TSO Status deleted successfully.";
                }
                else
                {
                    returnMessage = "TSO Status do not exists.";
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                if (ex.InnerException.InnerException.Message.Contains("REFERENCE constraint"))
                    throw new Exception("Specified tso status mapped with TSR / TSO.");
                else
                    throw;
            }
            finally
            {
                ls = null;
                if (null != objBusinessLayer)
                    objBusinessLayer.Dispose();
            }
            return returnMessage;
        }

        #endregion

        #region internal functions

        /// <summary>
        /// GetTSOStatusIDNameList
        /// </summary>
        /// <returns>IList<IDName></returns>
        internal IList<IDName> GetTSOStatusIDNameList()
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<IDName> objTSOStatusList = null;
            try
            {
                objTSOStatusList = objBusinessLayer.TSOStatusRepository.GetPartial<IDName>(x => new IDName { ID = x.ID, Name = x.Name });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objTSOStatusList;
        }

        #endregion

        [HttpGet, Route("v1/TSOStatus/GetAllIDName")]
        [ResponseType(typeof(IList<IDName>))]
        public JsonResult<IList<IDName>> GetAllIDName()
        {
            IList<IDName> objTSOStatusList = null;

            try
            {
                objTSOStatusList = this.GetTSOStatusIDNameList();
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            return Json(objTSOStatusList, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        }

        /// <summary>
        /// GetById
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>IHttpActionResult></returns>
        [HttpGet, Route("v1/TSOStatus/GetById/{id}")]
        [ResponseType(typeof(TSOStatusDTO))]
        public JsonResult<TSOStatusDTO> GetById(int id)
        {
            JsonResult<TSOStatusDTO> result = null;
            TSOStatusDTO objTSOStatusDTO;

            try
            {
                objTSOStatusDTO = this.GetTSOStatusById(id);

                result = Json(objTSOStatusDTO, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            return result;
        }

        /// <summary>
        /// GetAllPaged
        /// </summary>
        /// <returns>IHttpActionResult></returns>
        [HttpGet, Route("v1/TSOStatus/GetAllPaged/{startingRecordNumber}/{pageSize}")]
        [ResponseType(typeof(DataCollection))]
        public JsonResult<DataCollection> GetAllPaged(int startingRecordNumber, int pageSize)
        {
            int totalRecords = 0;
            IList<TSOStatusDTO> objTSOStatusDTOList = this.GetAllTSOStatus(startingRecordNumber, pageSize, out totalRecords);

            DataCollection objDataCollection;

            try
            {
                objDataCollection = new DataCollection { TotalRecords = totalRecords, EntitySummary = new List<IBaseObject>() };
                if (null != objTSOStatusDTOList)
                {
                    foreach (TSOStatusDTO objTSOStatus in objTSOStatusDTOList)
                    {
                        objDataCollection.EntitySummary.Add(objTSOStatus);
                    }
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            return Json(objDataCollection, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        }

        /// <summary>
        /// CreateTSOStatus
        /// </summary>
        /// <param name="tsoStatusDTO">TSOStatusDTO</param>
        /// <returns>JsonResult<string></returns>
        [HttpPost, Route("v1/TSOStatus/CreateTSOStatus")]
        [ResponseType(typeof(string))]
        public JsonResult<string> CreateTSOStatus([FromBody]TSOStatusDTO tsoStatusDTO)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {
                result = Json(this.AddNewTSOStatus(tsoStatusDTO), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// UpdateTSOStatus
        /// </summary>
        /// <param name="ID">int</param>
        /// <param name="tsoStatusDTO">TSOStatusDTO</param>
        /// <returns>JsonResult<string></returns>
        [ResponseType(typeof(string))]
        [HttpPut, Route("v1/TSOStatus/UpdateTSOStatus/{ID}")]
        public JsonResult<string> UpdateTSOStatus(int ID, [FromBody]TSOStatusDTO tsoStatusDTO)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {
                result = Json(this.ModifyTSOStatus(ID, tsoStatusDTO), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {

                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// DeleteTSOStatus
        /// </summary>
        /// <param name="ID">int</param>
        /// <returns>JsonResult<string></returns>
        [ResponseType(typeof(string))]
        [HttpDelete, Route("v1/TSOStatus/DeleteTSOStatus/{ID}")]
        public JsonResult<string> DeleteTSOStatus(int ID)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {

                result = Json(this.RemoveTSOStatus(ID), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// Dispose
        /// </summary>
        /// <param name="disposing">bool</param>
        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

    }
}
