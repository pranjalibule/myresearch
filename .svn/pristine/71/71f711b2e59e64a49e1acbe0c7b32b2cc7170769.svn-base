/******************************************************************************
 *                          © 2017 SQS India                            *
 *                          All Rights Reserved.                              *
 *                                                                            *
 ******************************************************************************
 *
 * Modification History:
 * 
 * AKS 04Oct2017 Created the class
 *******************************************************************************/

namespace SQS.nTier.TTM.WebAPI.Controllers
{
    using BAL;
    using Common;
    using DAL;
    using DTO;
    using GenericFramework;
    using GenericFramework.Utility;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Web.Http;
    using System.Web.Http.Description;
    using System.Web.Http.Results;

    /// <summary>
    /// QGPassedController
    /// </summary>
    [RoutePrefix("api")]
    public class QGPassedController : ApiController
    {
        #region Private Functions

        /// <summary>
        /// GetQGPassedById
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>QGPassed</returns>
        private QGPassedDTO GetQGPassedById(int id)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            QGPassedDTO objQGPassedDTO = null;

            try
            {
                QGPassed objQGPassed = objBusinessLayer.QGPassedRepository.GetByID(id);
                if (null != objQGPassed)
                {
                    objQGPassedDTO = new QGPassedDTO();
                    objQGPassedDTO = Conversions.ToDTO<QGPassedDTO, QGPassed>(objQGPassed);
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objQGPassedDTO;
        }

        /// <summary>
        /// GetAllQGPassed
        /// </summary>
        /// <returns>IList<QGPassed>></returns>
        private IList<QGPassedDTO> GetAllQGPassed(int startingRecordNumber, int pageSize, out int totalRecords)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<QGPassedDTO> objQGPassedDTOList = null;
            try
            {
                IList<QGPassed> objQGPassedList = objBusinessLayer.QGPassedRepository.GetAll(startingRecordNumber, pageSize, x => x.ID, false, out totalRecords);
                if (objQGPassedList != null && objQGPassedList.Count > 0)
                {
                    objQGPassedDTOList = new List<QGPassedDTO>();

                    foreach (QGPassed objQGPassed in objQGPassedList)
                    {
                        QGPassedDTO objQGPassedDTO = new QGPassedDTO();
                        objQGPassedDTO = Conversions.ToDTO<QGPassedDTO, QGPassed>(objQGPassed);

                        objQGPassedDTOList.Add(objQGPassedDTO);
                    }
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objQGPassedDTOList;
        }

        /// <summary>
        /// Function to add new QGPassed 
        /// </summary>
        /// <param name="objQGPassed">QGPassedDTO</param>
        /// <returns>string</returns>
        private string AddNewQGPassed(QGPassedDTO objQGPassedDTO)
        {
            string returnMessage = string.Empty;

            LoginSession ls = new LoginSession();
            ls.LoginName = "Admin";

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            try
            {
                bool result = CheckNameExists(objQGPassedDTO.Name);
                if (result == true)
                {
                    QGPassed objQGPassed = Conversions.ToEntity<QGPassedDTO, QGPassed>(objQGPassedDTO);
                    objBusinessLayer.QGPassedRepository.Add(objQGPassed);
                    returnMessage = "QGPassed added successfully.";
                }
                else
                {
                    returnMessage = "This " + objQGPassedDTO.Name + " record already exists.";
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return returnMessage;
        }
        private bool CheckNameExists(string Name)
        {
            LoginSession ls = new LoginSession();
            ls.LoginName = "Admin";
            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            var CheckNameExists = objBusinessLayer.QGPassedRepository.GetSingle(x => x.Name == Name);
            if (CheckNameExists == null)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <summary>
        /// Function to update QGPassed 
        /// </summary>
        /// <param name="ID">int</param>
        /// <param name="objQGPassedDTO">QGPassedDTO</param>
        /// <returns>string</returns>
        private string ModifyQGPassed(int ID, QGPassedDTO objQGPassedDTO)
        {

            string returnMessage = string.Empty;
            LoginSession ls = null;
            IBusinessLayer objBusinessLayer = null;
            try
            {
                QGPassedDTO objQGPassedDTOById = this.GetQGPassedById(ID);

                if (objQGPassedDTOById != null)
                {
                    ls = new LoginSession();
                    ls.LoginName = "Admin";

                    objBusinessLayer = new BusinessLayer(ls);
                    bool result = CheckNameExists(objQGPassedDTO.Name);
                    if (result == true)
                    {
                        objQGPassedDTOById.Name = objQGPassedDTO.Name;
                        objQGPassedDTOById.Description = objQGPassedDTO.Description;
                        returnMessage = "QGPassed updated successfully.";
                    }
                    else
                    {
                        objQGPassedDTOById.Description = objQGPassedDTO.Description;
                        returnMessage = "This " + objQGPassedDTO.Name + " record already exists.";
                    }
                    QGPassed objQGPassed = Conversions.ToEntity<QGPassedDTO, QGPassed>(objQGPassedDTOById);
                    objBusinessLayer.QGPassedRepository.Update(objQGPassed);
                }
                else
                {
                    returnMessage = "QGPassed do not exists.";
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                if (null != objBusinessLayer)
                    objBusinessLayer.Dispose();
            }
            return returnMessage;
        }

        /// <summary>
        /// RemoveQGPassed
        /// </summary>
        /// <param name="objQGPassedDTO">QGPassedDTO</param>
        private string RemoveQGPassed(int ID)
        {
            string returnMessage = string.Empty;
            LoginSession ls = null;
            IBusinessLayer objBusinessLayer = null;
            try
            {
                QGPassedDTO objQGPassedDTOById = this.GetQGPassedById(ID);

                if (objQGPassedDTOById != null)
                {
                    ls = new LoginSession();
                    ls.LoginName = "Admin";

                    objBusinessLayer = new BusinessLayer(ls);

                    QGPassed objQGPassed = Conversions.ToEntity<QGPassedDTO, QGPassed>(objQGPassedDTOById);
                    objBusinessLayer.QGPassedRepository.Delete(objQGPassed);
                    returnMessage = "QGPassed deleted successfully.";

                }
                else
                {
                    returnMessage = "QGPassed do not exists.";
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                if (ex.InnerException.InnerException.Message.Contains("REFERENCE constraint"))
                    throw new Exception("Specified QGPassed mapped with TSR / TSO.");
                else
                    throw;
            }
            finally
            {
                ls = null;
                if (null != objBusinessLayer)
                    objBusinessLayer.Dispose();
            }
            return returnMessage;
        }

        #endregion

        #region internal functions

        /// <summary>
        /// GetQGPassedIDNameList
        /// </summary>
        /// <returns>IList<IDName></returns>
        internal IList<IDName> GetQGPassedIDNameList()
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<IDName> objQGPassedList = null;
            try
            {
                objQGPassedList = objBusinessLayer.QGPassedRepository.GetPartial<IDName>(x => new IDName { ID = x.ID, Name = x.Name });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objQGPassedList;
        }

        #endregion

        [HttpGet, Route("v1/QGPassed/GetAllIDName")]
        [ResponseType(typeof(IList<IDName>))]
        public JsonResult<IList<IDName>> GetAllIDName()
        {
            IList<IDName> objQGPassedList = null;

            try
            {
                objQGPassedList = this.GetQGPassedIDNameList();
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw ex;
            }
            return Json(objQGPassedList, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        }

        /// <summary>
        /// GetById
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>IHttpActionResult></returns>
        [HttpGet, Route("v1/QGPassed/GetById/{id}")]
        [ResponseType(typeof(QGPassed))]
        public JsonResult<QGPassedDTO> GetById(int id)
        {
            JsonResult<QGPassedDTO> result = null;
            QGPassedDTO objQGPassedDTO;

            try
            {
                objQGPassedDTO = this.GetQGPassedById(id);

                result = Json(objQGPassedDTO, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw ex;
            }
            return result;
        }

        /// <summary>
        /// GetAllPaged
        /// </summary>
        /// <param name="pageSize">int</param>
        /// <param name="startingRecordNumber">int</param>
        /// <returns>JsonResult<DataCollection>></returns>
        [HttpGet, Route("v1/QGPassed/GetAllPaged/{startingRecordNumber}/{pageSize}")]
        [ResponseType(typeof(DataCollection))]
        public JsonResult<DataCollection> GetAllPaged(int startingRecordNumber, int pageSize)
        {
            int totalRecords = 0;
            IList<QGPassedDTO> objQGPassedDTOList = this.GetAllQGPassed(startingRecordNumber, pageSize, out totalRecords);

            DataCollection objDataCollection;

            try
            {
                objDataCollection = new DataCollection { TotalRecords = totalRecords, EntitySummary = new List<IBaseObject>() };
                if (null != objQGPassedDTOList)
                {
                    foreach (QGPassedDTO objQGPassed in objQGPassedDTOList)
                    {
                        objDataCollection.EntitySummary.Add(objQGPassed);
                    }
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw ex;
            }
            return Json(objDataCollection, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        }

        /// <summary>
        /// CreatePractice
        /// </summary>
        /// <param name="qgPassedDTO">QGPassedDTO</param>
        /// <returns>JsonResult<string></returns>
        [HttpPost, Route("v1/QGPassed/CreateQGPassed")]
        [ResponseType(typeof(string))]
        public JsonResult<string> CreateQGPassed([FromBody]QGPassedDTO qgPassedDTO)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {
                result = Json(this.AddNewQGPassed(qgPassedDTO), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// UpdateQGPassed
        /// </summary>
        /// <param name="ID">int</param>
        /// <param name="qgPassedDTO">QGPassedDTO</param>
        /// <returns>JsonResult<string></returns>
        [ResponseType(typeof(string))]
        [HttpPut, Route("v1/QGPassed/UpdateQGPassed/{ID}")]
        public JsonResult<string> UpdateQGPassed(int ID, [FromBody]QGPassedDTO qgPassedDTO)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {
                result = Json(this.ModifyQGPassed(ID, qgPassedDTO), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// DeleteQGPassed
        /// </summary>
        /// <param name="ID">int</param>
        /// <returns>JsonResult<string></returns>
        [ResponseType(typeof(string))]
        [HttpDelete, Route("v1/QGPassed/DeleteQGPassed/{ID}")]
        [ResponseType(typeof(string))]
        public JsonResult<string> DeleteQGPassed(int ID)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {

                result = Json(this.RemoveQGPassed(ID), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

    }
}
