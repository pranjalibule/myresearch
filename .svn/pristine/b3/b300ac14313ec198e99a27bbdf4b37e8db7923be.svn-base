/******************************************************************************
 *                          © 2017 SQS India                            *
 *                          All Rights Reserved.                              *
 *                                                                            *
 ******************************************************************************
 *
 * Modification History:
 * 
 * AKS  04Oct2017   Created the class
 * AKS  01Dec2017   Added logic to check unique TSO title
 *******************************************************************************/

namespace SQS.nTier.TTM.WebAPI.Controllers
{
    using BAL;
    using Common;
    using DAL;
    using DTO;
    using GenericFramework;
    using GenericFramework.Utility;
    using Newtonsoft.Json;
    using RoleAttribute;
    using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Data.Entity.Validation;
    using System.Linq;
    using System.Text;
    using System.Web.Http;
    using System.Web.Http.Description;
    using System.Web.Http.Results;

    /// <summary>
    /// TSOController
    /// </summary>
    [RoutePrefix("api")]
    public class TSOController : ApiController
    {
        #region Private Functions

        /// <summary>
        /// GetTSOById
        /// </summary>
        /// <param name="id">int</param>
        /// <param name="loadEntities">bool</param>
        /// <returns>TSO</returns>
        private TSODTO GetTSOById(int id, bool loadEntities = true)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            TSODTO objTSODTO = null;

            try
            {
                TSO objTSO = null;

                if (loadEntities)
                {
                    objTSO = objBusinessLayer.TSORepository.GetSingle(x => x.ID == id,
                    x => x.TeamLead,
                    x => x.OperationalRisk,
                    x => x.TSOServiceDeliveryChains,
                    x => x.TSR);
                }
                else
                {
                    objTSO = objBusinessLayer.TSORepository.GetSingle(x => x.ID == id);
                }

                if (null != objTSO)
                {
                    objTSODTO = new TSODTO();
                    objTSODTO = Conversions.ToDTO<TSODTO, TSO>(objTSO);

                    ProjectModelController pmC = new ProjectModelController();
                    if (objTSODTO.TSR == null)
                    {
                        TSRController tsrC = new TSRController();
                        objTSODTO.TSR = tsrC.GetTSR(objTSODTO.TSRId);
                    }
                    objTSODTO.TSR.ProjectModelName = pmC.GetProjectModelNameById(objTSODTO.TSR.ProjectModelID);
                }

                //TSOStatusDTO objTSOStatusDTO = Conversions.ToDTO<TSOStatusDTO, TSOStatus>(objTSO.TSOStatus);
                //objTSODTO.TSOStatus = objTSOStatusDTO;

                //CoreServiceDTO objCoreServiceDTO = Conversions.ToDTO<CoreServiceDTO, CoreService>(objTSO.CoreService);
                //objTSODTO.CoreService = objCoreServiceDTO;

                //TSRDTO objSTRDTO = Conversions.ToDTO<TSRDTO, TSR>(objTSO.TSR);
                //objTSODTO.TSR = objSTRDTO;

                //OperationalRiskDTO objOperationalRiskDTO = Conversions.ToDTO<OperationalRiskDTO, OperationalRisk>(objTSO.OperationalRisk);
                //objTSODTO.OperationalRisk = objOperationalRiskDTO;

                if (objTSODTO.ActualEffort == null)
                {
                    objTSODTO.ActualEffort = 0;
                }
                foreach (TSOServiceDeliveryChainDTO dileverychain in objTSODTO.TSOServiceDeliveryChains)
                {
                    TSOServiceDeliveryChainTaskDTO objTSOServiceDeliveryChainTaskDTO = this.GetLastTSOServiceDeliveryChainTask(dileverychain.ID);
                    if (objTSOServiceDeliveryChainTaskDTO != null)
                    {
                        objTSODTO.ActualEffort = Convert.ToInt32(objTSODTO.ActualEffort) + objTSOServiceDeliveryChainTaskDTO.ActualEffort;
                    }
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objTSODTO;
        }

        /// <summary>
        /// GetAllTSO
        /// </summary>
        /// <returns>IList<TSO>></returns>
        private IList<TSODTO> GetAllTSO(int tsrId, out int totalRecords)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<TSODTO> objTSODTOList = null;
            totalRecords = 0;
            try
            {
                // IList<TSO> objTSOList = objBusinessLayer.TSORepository.GetList(x => x.TSRId == tsrId, x => x.TSOServiceDeliveryChains, x => x.TSR, x=> x.TSOStatus,x=>x.TeamLead,x=>x.CoreService, x => x.OperationalRisk, x => x.RelevantRepository);
                IList<TSO> objTSOList = objBusinessLayer.TSORepository.GetList(x => x.TSRId == tsrId, x => x.TSOServiceDeliveryChains, x => x.TSR, x => x.TSOStatus, x => x.TeamLead, x => x.CoreService, x => x.OperationalRisk, x => x.RelevantRepository);

                // IList<TSO> objTSOList = objBusinessLayer.TSORepository.GetList(x => x.TSRId == tsrId, x => x.TSOServiceDeliveryChains, x => x.TSR, x => x.TSOStatus);

                if (objTSOList != null && objTSOList.Count > 0)
                {
                    objTSODTOList = new List<TSODTO>();

                    foreach (TSO objTSO in objTSOList)
                    {
                        UserDTO tl = Conversions.ToDTO<UserDTO, User>(objTSO.TeamLead);
                        double? ActualEffort = 0;
                        if (objTSO.TSOServiceDeliveryChains != null && objTSO.TSOServiceDeliveryChains.Count > 0)
                        {
                            foreach (TSOServiceDeliveryChain objTSOServiceDeliveryChain in objTSO.TSOServiceDeliveryChains)
                            {
                                objBusinessLayer = new BusinessLayer(ls);
                                ServiceDeliveryChain objServiceDeliveryChain = objBusinessLayer.ServiceDeliveryChainRepository.GetByID(objTSOServiceDeliveryChain.ServiceDeliveryChainId);

                                if (null != objServiceDeliveryChain)
                                {
                                    objTSOServiceDeliveryChain.ServiceDeliveryChain = objServiceDeliveryChain;
                                }

                                TSOServiceDeliveryChainTaskDTO objTSOServiceDeliveryChainTaskDTO = this.GetLastTSOServiceDeliveryChainTask(objTSOServiceDeliveryChain.ID);
                                if (objTSOServiceDeliveryChainTaskDTO != null)
                                {
                                    ActualEffort = ActualEffort + objTSOServiceDeliveryChainTaskDTO.ActualEffort;
                                }
                            }
                        }



                        TSODTO objTSODTO = new TSODTO();
                        objTSODTO = Conversions.ToDTO<TSODTO, TSO>(objTSO);

                        TSOStatusDTO objTSOStatusDTO = Conversions.ToDTO<TSOStatusDTO, TSOStatus>(objTSO.TSOStatus);
                        objTSODTO.TSOStatus = objTSOStatusDTO;

                        CoreServiceDTO objCoreServiceDTO = Conversions.ToDTO<CoreServiceDTO, CoreService>(objTSO.CoreService);
                        objTSODTO.CoreService = objCoreServiceDTO;

                        TSRDTO objSTRDTO = Conversions.ToDTO<TSRDTO, TSR>(objTSO.TSR);
                        objTSODTO.TSR = objSTRDTO;

                        OperationalRiskDTO objOperationalRiskDTO = Conversions.ToDTO<OperationalRiskDTO, OperationalRisk>(objTSO.OperationalRisk);
                        objTSODTO.OperationalRisk = objOperationalRiskDTO;

                        objTSODTO.ActualEffort = ActualEffort;
                        objTSODTO.TeamLead = tl;
                        objTSODTOList.Add(objTSODTO);
                    }

                    totalRecords = objTSODTOList.Count;
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objTSODTOList;
        }

        /// <summary>
        /// GetAllTSO
        /// </summary>
        /// <returns>IList<TSO>></returns>
        private IList<TSODTO> GetAllUserTSO(string userId, out int totalRecords, bool isadmin = false)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<TSODTO> objTSODTOList = null;
            totalRecords = 0;
            try
            {
                // IList<TSO> objTSOList = objBusinessLayer.TSORepository.GetList(x => x.TSRId == tsrId, x => x.TSOServiceDeliveryChains, x => x.TSR, x=> x.TSOStatus,x=>x.TeamLead,x=>x.CoreService, x => x.OperationalRisk, x => x.RelevantRepository);
                int userID = Convert.ToInt32(userId);
                IList<TSO> objTSOList;
                if (isadmin)
                {
                    objTSOList = objBusinessLayer.TSORepository.GetAll(x => x.TSR, x => x.TSOServiceDeliveryChains, x => x.TeamLead, x => x.TSOStatus, x => x.CoreService, x => x.OperationalRisk);
                }
                else
                {
                    objTSOList = objBusinessLayer.TSORepository.GetList(x => x.TeamLeadId == userID, x=>x.TSR, x=>x.TSOServiceDeliveryChains, x=>x.TeamLead, x=>x.TSOStatus, x=>x.CoreService, x=>x.OperationalRisk);
                }

                // IList<TSO> objTSOList = objBusinessLayer.TSORepository.GetList(x => x.TSRId == tsrId, x => x.TSOServiceDeliveryChains, x => x.TSR, x => x.TSOStatus);

                if (objTSOList != null && objTSOList.Count > 0)
                {
                    objTSODTOList = new List<TSODTO>();

                    foreach (TSO objTSO in objTSOList)
                    {

                        double? ActualEffort = 0;
                        if (objTSO.TSOServiceDeliveryChains != null && objTSO.TSOServiceDeliveryChains.Count > 0)
                        {
                            foreach (TSOServiceDeliveryChain objTSOServiceDeliveryChain in objTSO.TSOServiceDeliveryChains)
                            {
                                objBusinessLayer = new BusinessLayer(ls);
                                ServiceDeliveryChain objServiceDeliveryChain = objBusinessLayer.ServiceDeliveryChainRepository.GetByID(objTSOServiceDeliveryChain.ServiceDeliveryChainId);

                                if (null != objServiceDeliveryChain)
                                {
                                    objTSOServiceDeliveryChain.ServiceDeliveryChain = objServiceDeliveryChain;
                                }

                                TSOServiceDeliveryChainTaskDTO objTSOServiceDeliveryChainTaskDTO = this.GetLastTSOServiceDeliveryChainTask(objTSOServiceDeliveryChain.ID);
                                if (objTSOServiceDeliveryChainTaskDTO != null)
                                {
                                    ActualEffort = ActualEffort + objTSOServiceDeliveryChainTaskDTO.ActualEffort;
                                }
                            }
                        }

                        TSODTO objTSODTO = new TSODTO();
                        objTSODTO = Conversions.ToDTO<TSODTO, TSO>(objTSO);
                        objTSODTO.TeamLead = Conversions.ToDTO<UserDTO, User>(objTSO.TeamLead);
                        objTSODTO.TSOStatus = Conversions.ToDTO<TSOStatusDTO, TSOStatus>(objTSO.TSOStatus);
                        objTSODTO.TSR = Conversions.ToDTO<TSRDTO, TSR>(objTSO.TSR);
                        objTSODTO.CoreService = Conversions.ToDTO<CoreServiceDTO, CoreService>(objTSO.CoreService);
                        objTSODTO.OperationalRisk = Conversions.ToDTO<OperationalRiskDTO, OperationalRisk>(objTSO.OperationalRisk);

                        objTSODTO.ActualEffort = ActualEffort;
                        objTSODTOList.Add(objTSODTO);
                    }

                    totalRecords = objTSODTOList.Count;
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objTSODTOList;
        }

        /// <summary>
        /// Function to add new TSO 
        /// </summary>
        /// <param name="objTSO"></param>
        /// <returns></returns>
        private string AddNewTSO(TSODTO objTSODTO)
        {
            string returnMessage = string.Empty;

            LoginSession ls = new LoginSession();
            ls.LoginName = objTSODTO.CreatedBy;

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            try
            {
                TSO chkTSO = null;
                chkTSO = objBusinessLayer.TSORepository.GetSingle(x => x.Title == objTSODTO.Title && x.TSRId == objTSODTO.TSRId);

                if (chkTSO != null)
                {
                    returnMessage = "Error: TSO title already exists.";
                }
                else
                {
                    objBusinessLayer = new BusinessLayer(ls);
                    string strDefaultTSRStatusText = ConfigurationManager.AppSettings["DefaultTSOStatusText"].ToString();
                    TSOStatus objTSOStatus = objBusinessLayer.TSOStatusRepository.GetSingle(x => x.Name == strDefaultTSRStatusText);

                    objBusinessLayer = new BusinessLayer(ls);
                    objTSODTO.TSOStatusID = objTSOStatus.ID;
                    TSO objTSO = Conversions.ToEntity<TSODTO, TSO>(objTSODTO);
                    objBusinessLayer.TSORepository.Add(objTSO);

                    if (null != objTSO && objTSO.ID > 0)
                    {
                        if (!String.IsNullOrWhiteSpace(objTSODTO.TSOServiceDeliveryChainArr))
                        {
                            if (objTSODTO.TSOServiceDeliveryChainArr.IndexOf(",") <= 0)
                            {
                                objBusinessLayer = new BusinessLayer(ls);

                                TSOServiceDeliveryChain objTSOServiceDeliveryChain = new TSOServiceDeliveryChain { ServiceDeliveryChainId = int.Parse(objTSODTO.TSOServiceDeliveryChainArr), TSOId = objTSO.ID };

                                objBusinessLayer.TSOServiceDeliveryChainRepository.Add(objTSOServiceDeliveryChain);
                            }
                            else
                            {
                                //Add core services to TSO
                                foreach (string tsrCoreService in objTSODTO.TSOServiceDeliveryChainArr.Split(','))
                                {
                                    objBusinessLayer = new BusinessLayer(ls);

                                    TSOServiceDeliveryChain objTSOServiceDeliveryChain = new TSOServiceDeliveryChain { ServiceDeliveryChainId = int.Parse(tsrCoreService), TSOId = objTSO.ID };

                                    objBusinessLayer.TSOServiceDeliveryChainRepository.Add(objTSOServiceDeliveryChain);
                                }
                            }
                        }
                    }

                    UserController user = new UserController();
                    user.UserAssignmentAndSendMail(objTSO.TeamLeadId, "Test Service Order", objTSODTO.Title);

                    returnMessage = "TSO added successfully.";
                }
            }
            catch(Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return returnMessage;
        }

        /// <summary>
        /// Function to update TSO 
        /// </summary>
        /// <param name="objTSO"></param>
        /// <returns></returns>
        private string ModifyTSO(int ID, TSODTO objTSODTO)
        {

            string returnMessage = string.Empty;
            LoginSession ls = null;
            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            try
            {
                TSO chkTSO = null;
                chkTSO = objBusinessLayer.TSORepository.GetSingle(x => x.Title == objTSODTO.Title && x.TSRId == objTSODTO.TSRId && x.ID != ID);

                if (chkTSO != null)
                {
                    returnMessage = "Error: TSO title already exists.";
                }
                else
                {
                    TSODTO objTSODTOById = this.GetTSOById(ID, false);

                    if (objTSODTOById != null)
                    {
                        ls = new LoginSession();
                        ls.LoginName = objTSODTO.UpdatedBy;

                        objTSODTOById.Title = objTSODTO.Title;
                        objTSODTOById.TeamLeadId = objTSODTO.TeamLeadId;
                        objTSODTOById.Description = objTSODTO.Description;
                        objTSODTOById.TSRId = objTSODTO.TSRId;
                        objTSODTOById.CoreServiceId = objTSODTO.CoreServiceId;
                        objTSODTOById.CoreService = null;
                        objTSODTOById.RelevantRepositoryId = objTSODTO.RelevantRepositoryId;
                        objTSODTOById.RelevantRepository = null;
                        objTSODTOById.StartDate = objTSODTO.StartDate;
                        objTSODTOById.TargetCompletionDate = objTSODTO.TargetCompletionDate;
                        objTSODTOById.EstimatedEffort = objTSODTO.EstimatedEffort;
                        objTSODTOById.PlannedEffort = objTSODTO.PlannedEffort;
                        objTSODTOById.OperationalRiskId = objTSODTO.OperationalRiskId;
                        objTSODTOById.TSOStatusID = objTSODTO.TSOStatusID;
                        objTSODTOById.TSR = null;
                        objTSODTOById.OperationalRisk = null;
                        objTSODTOById.ActualStartDate = objTSODTO.ActualStartDate;
                        objTSODTOById.ActualCompletionDate = objTSODTO.ActualCompletionDate;

                        TSO objTSO = Conversions.ToEntity<TSODTO, TSO>(objTSODTOById);
                        objBusinessLayer = new BusinessLayer(ls);
                        objBusinessLayer.TSORepository.Update(objTSO);

                        if (null != objTSO && objTSO.ID > 0)
                        {
                            //Delete TSO Core Services
                            objBusinessLayer = new BusinessLayer(ls);
                            objTSODTOById = this.GetTSOById(ID);

                            objBusinessLayer = new BusinessLayer(ls);
                            string arrExistingTSOServiceDeliveryChain = string.Empty;

                            List<int> arrTSOServiceDeliveryChainToDelete = new List<int>();
                            List<int> arrTSOServiceDeliveryChainToInsert = new List<int>();

                            //Get the Service Delivery chain which needs to be deleted
                            foreach (TSOServiceDeliveryChainDTO objTSOServiceDeliveryChainDTO in objTSODTOById.TSOServiceDeliveryChains)
                            {
                                bool Found = false;

                                if (objTSODTO.TSOServiceDeliveryChainArr.IndexOf(",") <= 0)
                                {
                                    if (objTSOServiceDeliveryChainDTO.ServiceDeliveryChainId.ToString() == objTSODTO.TSOServiceDeliveryChainArr)
                                    {
                                        Found = true;
                                    }
                                }
                                else
                                {
                                    foreach (string strTSOServiceDeliveryChainId in objTSODTO.TSOServiceDeliveryChainArr.Split(','))
                                    {
                                        if (objTSOServiceDeliveryChainDTO.ServiceDeliveryChainId.ToString() == strTSOServiceDeliveryChainId)
                                        {
                                            Found = true;
                                            break;
                                        }
                                    }
                                }

                                if (!Found)
                                {
                                    arrTSOServiceDeliveryChainToDelete.Add(objTSOServiceDeliveryChainDTO.ServiceDeliveryChainId);
                                }
                            }

                            //Get the Service Delivery chain which needs to be added
                            if (objTSODTO.TSOServiceDeliveryChainArr.IndexOf(",") <= 0)
                            {
                                bool Found = false;
                                foreach (TSOServiceDeliveryChainDTO objTSOServiceDeliveryChainDTO in objTSODTOById.TSOServiceDeliveryChains)
                                {
                                    if (objTSOServiceDeliveryChainDTO.ServiceDeliveryChainId.ToString() == objTSODTO.TSOServiceDeliveryChainArr)
                                    {
                                        Found = true;
                                        break;
                                    }
                                }

                                if (!Found)
                                {
                                    arrTSOServiceDeliveryChainToInsert.Add(int.Parse(objTSODTO.TSOServiceDeliveryChainArr));
                                }
                            }
                            else
                            {
                                foreach (string strTSOServiceDeliveryChainId in objTSODTO.TSOServiceDeliveryChainArr.Split(','))
                                {
                                    bool Found = false;

                                    foreach (TSOServiceDeliveryChainDTO objTSOServiceDeliveryChainDTO in objTSODTOById.TSOServiceDeliveryChains)
                                    {
                                        if (objTSOServiceDeliveryChainDTO.ServiceDeliveryChainId.ToString() == strTSOServiceDeliveryChainId)
                                        {
                                            Found = true;
                                            break;
                                        }
                                    }

                                    if (!Found)
                                    {
                                        arrTSOServiceDeliveryChainToInsert.Add(int.Parse(strTSOServiceDeliveryChainId));
                                    }
                                }
                            }

                            //Delete the removed service chain
                            foreach (int deleteId in arrTSOServiceDeliveryChainToDelete)
                            {
                                objBusinessLayer = new BusinessLayer(ls);

                                TSOServiceDeliveryChain chkobj = null;
                                chkobj = objBusinessLayer.TSOServiceDeliveryChainRepository.GetSingle(x => x.TSOId == objTSO.ID && x.ServiceDeliveryChainId == deleteId);
                                if (chkobj != null)
                                {
                                    objBusinessLayer = new BusinessLayer(ls);
                                    objBusinessLayer.TSOServiceDeliveryChainTaskRepository.Delete(x => x.TSOServiceDeliveryChainId == chkobj.ID);

                                    objBusinessLayer = new BusinessLayer(ls);
                                    objBusinessLayer.TSOServiceDeliveryChainRepository.Delete(x => x.TSOId == objTSO.ID && x.ServiceDeliveryChainId == deleteId);
                                }
                            }

                            //Insert new service delivery chain
                            foreach (int insertId in arrTSOServiceDeliveryChainToInsert)
                            {
                                objBusinessLayer = new BusinessLayer(ls);
                                TSOServiceDeliveryChain tSRCoreService = new TSOServiceDeliveryChain { ServiceDeliveryChainId = insertId, TSOId = objTSO.ID };
                                objBusinessLayer.TSOServiceDeliveryChainRepository.Add(tSRCoreService);
                            }
                        }

                        returnMessage = "TSO updated successfully.";

                    }
                    else
                    {
                        returnMessage = "TSO do not exists.";
                    }
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                if (null != objBusinessLayer)
                    objBusinessLayer.Dispose();
            }
            return returnMessage;
        }

        /// <summary>
        /// RemoveTSO
        /// </summary>
        /// <param name="ID">int</param>
        private string RemoveTSO(int ID)
        {
            string returnMessage = string.Empty;
            LoginSession ls = null;
            IBusinessLayer objBusinessLayer = null;
            try
            {
                TSODTO objTSODTOById = this.GetTSOById(ID);

                if (objTSODTOById != null)
                {
                    if (objTSODTOById.TSOServiceDeliveryChains != null && objTSODTOById.TSOServiceDeliveryChains.Count > 0)
                    {
                        returnMessage = "Error: Can not delete TSO as Service delivery tasks exists for it.";
                    }
                    else
                    {
                        ls = new LoginSession();
                        ls.LoginName = "Admin";

                        objBusinessLayer = new BusinessLayer(ls);


                        TSO objTSO = Conversions.ToEntity<TSODTO, TSO>(objTSODTOById);
                        objBusinessLayer.TSORepository.Delete(objTSO);
                        returnMessage = "TSO deleted successfully.";
                    }
                }
                else
                {
                    returnMessage = "TSO do not exists.";
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                if (null != objBusinessLayer)
                    objBusinessLayer.Dispose();
            }
            return returnMessage;
        }

        /// <summary>
        /// AddNewTask
        /// </summary>
        /// <param name="tsoServiceDeliveryChainTaskDTO">TSOServiceDeliveryChainTaskDTO</param>
        /// <returns></returns>
        private string AddNewTask(TSOServiceDeliveryChainTaskDTO tsoServiceDeliveryChainTaskDTO)
        {
            string returnMessage = string.Empty;

            LoginSession ls = new LoginSession();
            ls.LoginName = tsoServiceDeliveryChainTaskDTO.CreatedBy;

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            try
            {
                TSOServiceDeliveryChainTask objTSOServiceDeliveryChainTask = Conversions.ToEntity<TSOServiceDeliveryChainTaskDTO, TSOServiceDeliveryChainTask>(tsoServiceDeliveryChainTaskDTO);
                objBusinessLayer.TSOServiceDeliveryChainTaskRepository.Add(objTSOServiceDeliveryChainTask);

                if (objTSOServiceDeliveryChainTask.PercentageComplete == "Y")
                {

                    ls = new LoginSession();
                    ls.LoginName = tsoServiceDeliveryChainTaskDTO.CreatedBy;
                    objBusinessLayer = new BusinessLayer(ls);

                    TSOServiceDeliveryChain tSOServiceDeliveryChain = objBusinessLayer.TSOServiceDeliveryChainRepository.GetSingle(x => x.ID == objTSOServiceDeliveryChainTask.TSOServiceDeliveryChainId, x => x.TSO, x => x.ServiceDeliveryChain);
                    string name = tSOServiceDeliveryChain.ServiceDeliveryChain.Name;
                    if (name == "A" || name == "D" || name == "I" || name == "E")
                    {
                        ls = new LoginSession();
                        ls.LoginName = tsoServiceDeliveryChainTaskDTO.CreatedBy;
                        objBusinessLayer = new BusinessLayer(ls);

                        objBusinessLayer.TSORepository.Update(tSOServiceDeliveryChain.TSO);
                    }
                }


                returnMessage = "Task added successfully.";
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return returnMessage;
        }

        /// <summary>
        /// GetLastTSOServiceDeliveryChainTask
        /// </summary>
        /// <param name="tsoServiceDeliveryChainId">int</param>
        /// <returns>TSOServiceDeliveryChainTaskDTO</returns>
        private TSOServiceDeliveryChainTaskDTO GetLastTSOServiceDeliveryChainTask(int tsoServiceDeliveryChainId)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            TSOServiceDeliveryChainTaskDTO objTSOServiceDeliveryChainTaskDTO = null;

            try
            {
                int totalRecords = 0;
                TSOServiceDeliveryChainTask objTSOServiceDeliveryChainTask = objBusinessLayer.TSOServiceDeliveryChainTaskRepository.GetList(0, 1, x => x.TSOServiceDeliveryChainId == tsoServiceDeliveryChainId, x => x.ID, true, out totalRecords).FirstOrDefault();

                if (null != objTSOServiceDeliveryChainTask)
                {
                    objTSOServiceDeliveryChainTaskDTO = new TSOServiceDeliveryChainTaskDTO();
                    objTSOServiceDeliveryChainTaskDTO = Conversions.ToDTO<TSOServiceDeliveryChainTaskDTO, TSOServiceDeliveryChainTask>(objTSOServiceDeliveryChainTask);
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objTSOServiceDeliveryChainTaskDTO;
        }

        #endregion

        #region internal functions

        /// <summary>
        /// GetTSOIDNameList
        /// </summary>
        /// <returns>IList<IDName></returns>
        internal IList<IDName> GetTSOIDNameList()
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<IDName> objTSOList = null;
            try
            {
                objTSOList = objBusinessLayer.TSORepository.GetPartial<IDName>(x => new IDName { ID = x.ID, Name = x.Title, Other = x.Description });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objTSOList;
        }

        #endregion

        [HttpGet, Route("v1/TSO/GetAllIDName")]
        [ResponseType(typeof(IList<IDName>))]
        public JsonResult<IList<IDName>> GetAllIDName()
        {
            IList<IDName> objTSOList = null;

            try
            {
                objTSOList = this.GetTSOIDNameList();
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            return Json(objTSOList, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        }

        /// <summary>
        /// Get
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>IHttpActionResult></returns>
        [HttpGet, Route("v1/TSO/GetById/{id}")]
        [ResponseType(typeof(TSO))]
        [SessionAuthorize(Roles = "Admin,Delivery Manager,Test Manager,Team Lead")]
        public JsonResult<TSODTO> GetById(int id)
        {
            JsonResult<TSODTO> result = null;
            TSODTO objTSODTO;

            try
            {
                objTSODTO = this.GetTSOById(id);

                result = Json(objTSODTO, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            return result;
        }

        public TSODTO GetTSODTO(int id)
        {
            TSODTO objTSODTO;
            try
            {
                objTSODTO = this.GetTSOById(id);
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            return objTSODTO;
        }

        /// <summary>
        /// GetAllPaged
        /// </summary>
        /// <param name="pageSize">int</param>
        /// <param name="startingRecordNumber">int</param>
        /// <returns>JsonResult<DataCollection>></returns>
        [HttpGet, Route("v1/TSO/GetAllPaged/{tsrId}")]
        [ResponseType(typeof(DataCollection))]
        [SessionAuthorize(Roles = "Admin,Delivery Manager,Account Manager,Test Manager,Team Lead,PQM,Guest")]
        public JsonResult<DataCollection> GetAllPaged(int tsrId)
        {
            int totalRecords = 0;
            IList<TSODTO> objTSODTOList = this.GetAllTSO(tsrId, out totalRecords);

            DataCollection objDataCollection;

            try
            {
                objDataCollection = new DataCollection { TotalRecords = totalRecords, EntitySummary = new List<IBaseObject>() };
                if (null != objTSODTOList)
                {
                    foreach (TSODTO objTSO in objTSODTOList)
                    {
                        objDataCollection.EntitySummary.Add(objTSO);
                    }
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }

            return Json(objDataCollection, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        }

        /// <summary>
        /// GetAllPaged
        /// </summary>
        /// <param name="pageSize">int</param>
        /// <param name="startingRecordNumber">int</param>
        /// <returns>JsonResult<DataCollection>></returns>
        [HttpGet, Route("v1/TSO/GetAllUserPaged")]
        [ResponseType(typeof(DataCollection))]
        [SessionAuthorize(Roles = "Admin,Delivery Manager,Account Manager,Test Manager,Team Lead,PQM,Guest")]
        public JsonResult<DataCollection> GetAllUserPaged()
        {
            int totalRecords = 0;
            Encryption.CryptorEngine objCryptorEngine = new Encryption.CryptorEngine();
            JsonResult<DataCollection> objReturn = null;
            string userId = Request.Headers.GetValues("userid").FirstOrDefault();
            if (!String.IsNullOrWhiteSpace(userId))
            {
                userId = userId.Replace("~", "=").Replace("!", "+");
                string User = objCryptorEngine.Decrypt(userId, true);
                bool isAdmin = User.ToLower().Contains("admin");
                User = User.Substring(User.LastIndexOf('#') + 1);
                IList<TSODTO> objTSODTOList = this.GetAllUserTSO(User, out totalRecords, isAdmin);

                DataCollection objDataCollection;

                try
                {
                    objDataCollection = new DataCollection { TotalRecords = totalRecords, EntitySummary = new List<IBaseObject>() };
                    if (null != objTSODTOList)
                    {
                        foreach (TSODTO objTSO in objTSODTOList)
                        {
                            objDataCollection.EntitySummary.Add(objTSO);
                        }
                    }
                }
                catch (Exception ex)
                {
                    TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                    throw;
                }

                objReturn = Json(objDataCollection, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return objReturn;
        }

        /// <summary>
        /// CreateTSO
        /// </summary>
        /// <param name="tsoDTO">TSODTO</param>
        /// <returns>JsonResult<string></returns>
        [HttpPost, Route("v1/TSO/CreateTSO")]
        [ResponseType(typeof(string))]
        [SessionAuthorize(Roles = "Admin,Delivery Manager,Test Manager,Team Lead")]
        public JsonResult<string> CreateTSO([FromBody]TSODTO tsoDTO)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {
                result = Json(this.AddNewTSO(tsoDTO), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (DbEntityValidationException eve)
            {
                StringBuilder objSB = new StringBuilder();
                foreach (var objEve in eve.EntityValidationErrors)
                {
                    objSB.Append(String.Format("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:", objEve.Entry.Entity.GetType().Name, objEve.Entry.State));
                    objSB.Append("\n");
                    foreach (var ve in objEve.ValidationErrors)
                    {
                        objSB.Append(String.Format("- Property: \"{0}\", Error: \"{1}\"", ve.PropertyName, ve.ErrorMessage));
                        objSB.Append("\n");
                    }
                }

                result = Json(String.Format("Error - {0}", objSB.ToString()), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// UpdateTSO
        /// </summary>
        /// <param name="ID">int</param>
        /// <param name="tsoDTO">TSODTO</param>
        /// <returns>JsonResult<string></returns>
        [ResponseType(typeof(string))]
        [HttpPut, Route("v1/TSO/UpdateTSO/{ID}")]
        [SessionAuthorize(Roles = "Admin,Delivery Manager,Test Manager,Team Lead")]
        public JsonResult<string> UpdateTSO(int ID, [FromBody]TSODTO tsoDTO)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {
                result = Json(this.ModifyTSO(ID, tsoDTO), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// DeleteTSO
        /// </summary>
        /// <param name="ID">int</param>
        /// <returns>JsonResult<string></returns>
        [HttpDelete, Route("v1/TSO/DeleteTSO/{ID}")]
        [ResponseType(typeof(string))]
        [SessionAuthorize(Roles = "Admin")]
        public JsonResult<string> DeleteTSO(int ID)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {

                result = Json(this.RemoveTSO(ID), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// CreateTSO
        /// </summary>
        /// <param name="tsrDTO">TSODTO</param>
        /// <returns>JsonResult<string></returns>
        [HttpPost, Route("v1/TSO/CreateTask")]
        [ResponseType(typeof(string))]
        [SessionAuthorize(Roles = "Admin,Team Lead")]
        public JsonResult<string> CreateTask([FromBody]TSOServiceDeliveryChainTaskDTO tsoServiceDeliveryChainTaskDTO)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {
                result = Json(this.AddNewTask(tsoServiceDeliveryChainTaskDTO), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (DbEntityValidationException eve)
            {
                StringBuilder objSB = new StringBuilder();
                foreach (var objEve in eve.EntityValidationErrors)
                {
                    objSB.Append(String.Format("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:", objEve.Entry.Entity.GetType().Name, objEve.Entry.State));
                    objSB.Append("\n");
                    foreach (var ve in objEve.ValidationErrors)
                    {
                        objSB.Append(String.Format("- Property: \"{0}\", Error: \"{1}\"", ve.PropertyName, ve.ErrorMessage));
                        objSB.Append("\n");
                    }
                }

                result = Json(String.Format("Error - {0}", objSB.ToString()), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        //
        /// <summary>
        /// Get
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>IHttpActionResult></returns>
        [HttpGet, Route("v1/TSO/GetLastTask/{tsoServiceDeliveryChainId}")]
        [ResponseType(typeof(TSO))]
        [SessionAuthorize(Roles = "Admin,Account Manager,Delivery Manager,Test Manager,Team Lead,PQM,Guest")]
        public JsonResult<TSOServiceDeliveryChainTaskDTO> GetLastTask(int tsoServiceDeliveryChainId)
        {
            JsonResult<TSOServiceDeliveryChainTaskDTO> result = null;
            TSOServiceDeliveryChainTaskDTO objTSOServiceDeliveryChainTaskDTO;

            try
            {
                objTSOServiceDeliveryChainTaskDTO = this.GetLastTSOServiceDeliveryChainTask(tsoServiceDeliveryChainId);
                if (null != objTSOServiceDeliveryChainTaskDTO)
                {
                    result = Json(objTSOServiceDeliveryChainTaskDTO, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
                }
                else
                {
                    objTSOServiceDeliveryChainTaskDTO = new TSOServiceDeliveryChainTaskDTO();

                    result = Json(objTSOServiceDeliveryChainTaskDTO, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            return result;
        }

        /// <summary>
        /// Dispose
        /// </summary>
        /// <param name="disposing"></param>
        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

    }
}
