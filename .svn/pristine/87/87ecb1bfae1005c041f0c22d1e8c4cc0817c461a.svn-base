/******************************************************************************
 *                          © 2017 SQS India                                  *
 *                          All Rights Reserved.                              *
 *                                                                            *
 ******************************************************************************
 *
 * Modification History:
 * 
 * TRB  05May2018   Created the class
 * 
 *******************************************************************************/


namespace SQS.nTier.TTM.WebAPI.Controllers
{
    using BAL;
    using Common;
    using DAL;
    using DTO;
    using GenericFramework;
    using GenericFramework.Utility;
    using Newtonsoft.Json;
    using RoleAttribute;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity.Validation;
    using System.Linq;
    using System.Text;
    using System.Web.Http;
    using System.Web.Http.Description;
    using System.Web.Http.Results;

    /// <summary>
    /// ServiceDeliveryChainTask
    /// </summary>
    [RoutePrefix("api")]
    public class ServiceDeliveryChainTaskController : ApiController
    {
        #region Private Functions

        /// <summary>
        /// Get All Tasks using tsoId
        /// </summary>
        /// <param name="tsoId"></param>
        /// <param name="startingRecordNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        private IList<TSOServiceDeliveryChainDTO> GetAllTSOServiceDeliveryChain(int tsoId, int startingRecordNumber, int pageSize, out int totalRecords)
        {
            LoginSession ls = new LoginSession();
            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<TSOServiceDeliveryChainDTO> objTaskSDTOList = null;
            totalRecords = 0;
            try
            {
                IList<TSOServiceDeliveryChain> objTask = null;
                objTask = objBusinessLayer.TSOServiceDeliveryChainRepository.GetAllWithWhere(startingRecordNumber, pageSize, x => x.ID, false, out totalRecords, x => x.TSOId == tsoId,
                    x => x.ServiceDeliveryChain,
                    x => x.TSOServiceDeliveryChainTasks,
                    x => x.TSO, x => x.TSO.TSR.Client, x => x.TSO.TSR,
                    x => x.TSO.TSR.SolutionCentre

                    );




                objTaskSDTOList = new List<TSOServiceDeliveryChainDTO>();
                objBusinessLayer = new BusinessLayer(ls);
                foreach (TSOServiceDeliveryChain objTSOServiceDeliveryChain in objTask)
                {
                    List<TSOServiceDeliveryChainTask> objTSOServiceDeliveryChainTaskList = objTSOServiceDeliveryChain.TSOServiceDeliveryChainTasks.OrderBy(x => x.WeekNumber).ToList();//  == currentWeek);
                    TSOServiceDeliveryChainTask objtsoTask = objTSOServiceDeliveryChainTaskList.LastOrDefault();
                    // TSOServiceDeliveryChainTask objtsoTask = objTSOServiceDeliveryChain.TSOServiceDeliveryChainTasks.Reverse().FirstOrDefault();
                    if (null != objtsoTask)
                    {
                        var objTSOSDeliveryChainTaskDTO = Conversions.ToDTO<TSOServiceDeliveryChainTaskDTO, TSOServiceDeliveryChainTask>(objtsoTask);

                        var objTSOSDeliveryChainDTO = Conversions.ToDTO<TSOServiceDeliveryChainDTO, TSOServiceDeliveryChain>(objTSOServiceDeliveryChain);
                        objTSOSDeliveryChainDTO.TSOServiceDeliveryChainTasks.Clear();

                        objTSOSDeliveryChainDTO.TaskStatus = GetTaskStatus(objTSOSDeliveryChainTaskDTO.TaskStatusId);

                        objTSOSDeliveryChainDTO.TSOServiceDeliveryChainTasks.Add(objTSOSDeliveryChainTaskDTO);
                        objTaskSDTOList.Add(objTSOSDeliveryChainDTO);
                    }
                    else
                    {
                        var objTSOSDeliveryChainDTO = Conversions.ToDTO<TSOServiceDeliveryChainDTO, TSOServiceDeliveryChain>(objTSOServiceDeliveryChain);
                        objTSOSDeliveryChainDTO.TaskStatus = "not started";
                        objTaskSDTOList.Add(objTSOSDeliveryChainDTO);
                    }
                }
                totalRecords = objTaskSDTOList.Count;

            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objTaskSDTOList;
        }


        /// <summary>
        /// Get All Tasks
        /// </summary>
        /// <param name="startingRecordNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="userId"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        private IList<TSOServiceDeliveryChainDTO> GetAllUserTASKS(int startingRecordNumber, int pageSize, string userId, out int totalRecords)
        {
            LoginSession ls = new LoginSession();
            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            totalRecords = 0;
            IList<TSOServiceDeliveryChainDTO> objTaskSDTOList = null;

            try
            {
                IList<TSOServiceDeliveryChain> objTask = null;
                objBusinessLayer = new BusinessLayer(ls);
                objTask = objBusinessLayer.TSOServiceDeliveryChainRepository.GetAll(startingRecordNumber, pageSize, x => x.ID, false, out totalRecords,
                     x => x.ServiceDeliveryChain,
                    x => x.TSOServiceDeliveryChainTasks,
                    x => x.TSO, x => x.TSO.TSR.Client, x => x.TSO.TSR,
                    x => x.TSO.TSR.SolutionCentre

                    );

                objTaskSDTOList = new List<TSOServiceDeliveryChainDTO>();

                foreach (TSOServiceDeliveryChain objTSOServiceDeliveryChain in objTask)
                {

                    objBusinessLayer = new BusinessLayer(ls);

                    List<TSOServiceDeliveryChainTask> objTSOServiceDeliveryChainTaskList = objTSOServiceDeliveryChain.TSOServiceDeliveryChainTasks.OrderBy(x => x.WeekNumber).ToList();//  == currentWeek);
                    TSOServiceDeliveryChainTask objtsoTask = objTSOServiceDeliveryChainTaskList.LastOrDefault();
                    if (null != objtsoTask)
                    {
                        var objTSOSDeliveryChainTaskDTO = Conversions.ToDTO<TSOServiceDeliveryChainTaskDTO, TSOServiceDeliveryChainTask>(objtsoTask);

                        var objTSOSDeliveryChainDTO = Conversions.ToDTO<TSOServiceDeliveryChainDTO, TSOServiceDeliveryChain>(objTSOServiceDeliveryChain);
                        objTSOSDeliveryChainDTO.TSOServiceDeliveryChainTasks.Clear();

                        objTSOSDeliveryChainDTO.TaskStatus = GetTaskStatus(objTSOSDeliveryChainTaskDTO.TaskStatusId);

                        objTSOSDeliveryChainDTO.TSOServiceDeliveryChainTasks.Add(objTSOSDeliveryChainTaskDTO);
                        objTaskSDTOList.Add(objTSOSDeliveryChainDTO);
                    }
                    else
                    {
                        var objTSOSDeliveryChainDTO = Conversions.ToDTO<TSOServiceDeliveryChainDTO, TSOServiceDeliveryChain>(objTSOServiceDeliveryChain);
                        objTSOSDeliveryChainDTO.TaskStatus = "not started";
                        objTaskSDTOList.Add(objTSOSDeliveryChainDTO);
                    }
                }
                totalRecords = objTaskSDTOList.Count;

            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }


            return objTaskSDTOList;
        }
        private IList<TSOServiceDeliveryChainTaskDTO> GetAllUserTASK(int startingRecordNumber, int pageSize, string userId, out int totalRecords)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            totalRecords = 0;
            IList<TSOServiceDeliveryChainTaskDTO> objTSOTASKDTOList = null;
            try
            {
                IList<TSOServiceDeliveryChainTask> objTSOServiceDeliveryChainTaskList = objBusinessLayer.TSOServiceDeliveryChainTaskRepository.GetAll(startingRecordNumber, pageSize, x => x.ID, false, out totalRecords, x => x.TSOServiceDeliveryChain, x => x.TSOServiceDeliveryChain.TSO.TSR,
                    x => x.TSOServiceDeliveryChain.TSO.TeamLead, x => x.TSOServiceDeliveryChain.TSO.TSR.Client,
                    x => x.TSOServiceDeliveryChain.TSO.TSR.ClientRegion, x => x.TSOServiceDeliveryChain.TSO.TSR.SolutionCentre,
                    x => x.TSOServiceDeliveryChain.TSO.TSR.TSRCoreServices, x => x.TSOServiceDeliveryChain.TSO.TSR.OperationalRisk,
                    x => x.TSOServiceDeliveryChain.TSO.TSOStatus, x => x.TSOServiceDeliveryChain.TSO.TSR.PricingModel,
                    x => x.ServiceDeliveryChainMethod, x => x.TSOServiceDeliveryChain.ServiceDeliveryChain,
                    x => x.TaskStatus);



                if (objTSOServiceDeliveryChainTaskList != null && objTSOServiceDeliveryChainTaskList.Count > 0)
                {
                    objTSOTASKDTOList = new List<TSOServiceDeliveryChainTaskDTO>();
                    // TSOServiceDeliveryChainTaskDTO objTSOTASKDTO = Conversions.ToDTO<TSOServiceDeliveryChainTaskDTO, TSOServiceDeliveryChainTask>();
                    //objTSODTO.CoreService = objCoreServiceDTO;
                    foreach (TSOServiceDeliveryChainTask objTSOServiceDeliveryChainTask in objTSOServiceDeliveryChainTaskList)
                    {

                        var objTSOServiceDeliveryChainTaskDTO = Conversions.ToDTO<TSOServiceDeliveryChainTaskDTO, TSOServiceDeliveryChainTask>(objTSOServiceDeliveryChainTask);

                        objTSOTASKDTOList.Add(objTSOServiceDeliveryChainTaskDTO);

                    }
                }
                totalRecords = objTSOTASKDTOList.Count;

            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }
            return objTSOTASKDTOList;

        }

        /// <summary>
        /// GetTSOTASKById
        /// </summary>
        /// <param name="id">int</param>
        /// <param name="loadEntities">bool</param>
        /// <returns>Tasks</returns>
        private TSOServiceDeliveryChainTaskDTO GetTSOTASKById(int id, bool loadEntities = true)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            // IList<TSOServiceDeliveryChainTaskDTO> objTSOTaskDTOList = null;
            TSOServiceDeliveryChainTaskDTO objTaskDTOList = null;
            try
            {
                TSOServiceDeliveryChain objTask = null;

                if (loadEntities)
                {
                    objTask = objBusinessLayer.TSOServiceDeliveryChainRepository.GetSingle(x => x.TSOId == id,
                        x => x.ServiceDeliveryChain,
                        x => x.TSOServiceDeliveryChainTasks,
                        x => x.TSO

                        );
                }

                objBusinessLayer = new BusinessLayer(ls);
                IList<TSOServiceDeliveryChainTask> objTSOServiceDeliveryChainTaskList = objBusinessLayer.TSOServiceDeliveryChainTaskRepository.GetList(x => x.TSOServiceDeliveryChainId == objTask.ServiceDeliveryChainId, x => x.TSOServiceDeliveryChain, x => x.TSOServiceDeliveryChain.TSO.TSR,
                   x => x.TSOServiceDeliveryChain.TSO.TeamLead, x => x.TSOServiceDeliveryChain.TSO.TSR.Client,
                   x => x.ServiceDeliveryChainMethod, x => x.TSOServiceDeliveryChain.ServiceDeliveryChain);

                if (objTSOServiceDeliveryChainTaskList != null && objTSOServiceDeliveryChainTaskList.Count > 0)
                {
                    objTaskDTOList = new TSOServiceDeliveryChainTaskDTO();
                    foreach (TSOServiceDeliveryChainTask objTSOServiceDeliveryChainTask in objTSOServiceDeliveryChainTaskList)
                    {
                        var objTSOServiceDeliveryChainTaskDTO = Conversions.ToDTO<TSOServiceDeliveryChainTaskDTO, TSOServiceDeliveryChainTask>(objTSOServiceDeliveryChainTask);

                        objTaskDTOList = objTSOServiceDeliveryChainTaskDTO;
                    }
                }


            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objTaskDTOList;
        }


        #endregion


        /// <summary>
        /// GetAllUserPaged
        /// </summary>
        /// <param name="pageSize">int</param>
        /// <param name="startingRecordNumber">int</param>
        /// <returns>JsonResult<DataCollection>></returns>
        [HttpGet, Route("v1/ServiceDeliveryChainTask/GetAllUserPaged/{startingRecordNumber}/{pageSize}")]
        [ResponseType(typeof(DataCollection))]
        [SessionAuthorize(Roles = "Admin,Delivery Manager,Account Manager,Test Manager,Team Lead,PQM,Guest")]
        public JsonResult<DataCollection> GetAllUserPaged(int startingRecordNumber, int pageSize)
        {
            int totalRecords = 0;
            Encryption.CryptorEngine objCryptorEngine = new Encryption.CryptorEngine();
            JsonResult<DataCollection> objReturn = null;
            string userId = Request.Headers.GetValues("userid").FirstOrDefault();
            if (!String.IsNullOrWhiteSpace(userId))
            {
                userId = userId.Replace("~", "=").Replace("!", "+");
                string User = objCryptorEngine.Decrypt(userId, true);
                bool isAdmin = User.ToLower().Contains("admin");
                string[] usrInfo = User.Split('#');
                User = usrInfo[usrInfo.Length - 2];


                IList<TSOServiceDeliveryChainDTO> objTSOServiceDeliveryChainDTOList = this.GetAllUserTASKS(startingRecordNumber, pageSize, User, out totalRecords);

                DataCollection objDataCollection;

                try
                {
                    objDataCollection = new DataCollection { TotalRecords = totalRecords, EntitySummary = new List<IBaseObject>() };
                    if (null != objTSOServiceDeliveryChainDTOList)
                    {
                        foreach (TSOServiceDeliveryChainDTO objTASK in objTSOServiceDeliveryChainDTOList)
                        {
                            objDataCollection.EntitySummary.Add(objTASK);
                        }
                    }
                }
                catch (Exception ex)
                {
                    TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                    throw;
                }

                objReturn = Json(objDataCollection, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return objReturn;
        }


        private IList<TSOServiceDeliveryChainTaskDTO> GetAllTask(int tsoId, int startingRecordNumber, int pageSize, out int totalRecords)
        {
            LoginSession ls = new LoginSession();
            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<TSOServiceDeliveryChain> objTaskSDTOList = null;
            //IList<TSOServiceDeliveryChainDTO> objServiceDeliveryTaskDTOList = null;
            //IList<TSOServiceDeliveryChainTask> objTSOServiceDeliveryChainTaskList = null;
            //List<TSOServiceDeliveryChainDTO> objTSOServiceDeliveryChainDTOList = null;
            totalRecords = 0;

            IList<TSOServiceDeliveryChainTaskDTO> objTaskDTOList = null;
            totalRecords = 0;
            try
            {
                objTaskSDTOList = objBusinessLayer.TSOServiceDeliveryChainRepository.GetAllWithWhere(startingRecordNumber, pageSize, x => x.ID, false, out totalRecords, x => x.TSOId == tsoId,
                    x => x.ServiceDeliveryChain,
                     x => x.TSO);
                objBusinessLayer = new BusinessLayer(ls);
                IList<TSOServiceDeliveryChainTask> objTSOTASKList = objBusinessLayer.TSOServiceDeliveryChainTaskRepository.GetAllWithWhere(startingRecordNumber, pageSize, x => x.ID, false, out totalRecords, x => x.TSOServiceDeliveryChain.TSOId == tsoId,
                    x => x.TSOServiceDeliveryChain.TSO.TSR,
                     x => x.TSOServiceDeliveryChain.TSO.TSR.Client,
                     x => x.TSOServiceDeliveryChain.TSO.TSR.SolutionCentre,
                    x => x.ServiceDeliveryChainMethod, x => x.TSOServiceDeliveryChain.ServiceDeliveryChain,
                    x => x.TaskStatus);

                objBusinessLayer = new BusinessLayer(ls);


                if (objTSOTASKList != null && objTSOTASKList.Count > 0)
                {
                    objTaskDTOList = new List<TSOServiceDeliveryChainTaskDTO>();
                    foreach (TSOServiceDeliveryChainTask objTSOServiceDeliveryChainTask in objTSOTASKList)
                    {

                        var objTSOServiceDeliveryChainTaskDTO = Conversions.ToDTO<TSOServiceDeliveryChainTaskDTO, TSOServiceDeliveryChainTask>(objTSOServiceDeliveryChainTask);

                        objTaskDTOList.Add(objTSOServiceDeliveryChainTaskDTO);

                    }
                    totalRecords = objTaskDTOList.Count;
                }
                else
                {
                    totalRecords = 0;
                }
                //IList<TSOServiceDeliveryChain> objTask = null;
                //objTask = objBusinessLayer.TSOServiceDeliveryChainRepository.GetAllWithWhere(startingRecordNumber, pageSize, x => x.ID, false, out totalRecords, x => x.TSOId == tsoId,
                //    x => x.ServiceDeliveryChain,
                //    x => x.TSOServiceDeliveryChainTasks,
                //    x => x.TSO,
                //    x => x.TSO.TSR.SolutionCentre,
                //    x => x.TSO.TSR.PricingModel


                //  );
                //foreach (TSOServiceDeliveryChain objTSOServiceDeliveryChain in objTask)
                //{
                //    objBusinessLayer = new BusinessLayer(ls);
                //    objTSOServiceDeliveryChainTaskList = objBusinessLayer.TSOServiceDeliveryChainTaskRepository.GetListWithOrder(x => x.TSOServiceDeliveryChainId == objTSOServiceDeliveryChain.ID, x => x.WeekNumber, x => x.TSOServiceDeliveryChain.TSO.TSR.Client,
                //            x => x.TSOServiceDeliveryChain.TSO.TSR.ClientRegion, x => x.TSOServiceDeliveryChain.TSO.TSR.SolutionCentre, x => x.TSOServiceDeliveryChain.TSO.TSOStatus, x => x.TSOServiceDeliveryChain.TSO.TSR.PricingModel,
                //            x => x.ServiceDeliveryChainMethod, x => x.TSOServiceDeliveryChain.ServiceDeliveryChain,
                //            x => x.TaskStatus
                //            );
                //}
                //if (objTSOServiceDeliveryChainTaskList.Count() != 0)
                //{
                //    objTaskDTOList = new List<TSOServiceDeliveryChainTaskDTO>();
                //    objBusinessLayer = new BusinessLayer(ls);
                //    foreach (TSOServiceDeliveryChainTask objTSOServiceDeliveryChainTask in objTSOServiceDeliveryChainTaskList)
                //    {

                //        var objTSOServiceDeliveryChainTaskDTO = Conversions.ToDTO<TSOServiceDeliveryChainTaskDTO, TSOServiceDeliveryChainTask>(objTSOServiceDeliveryChainTask);
                //        objTaskDTOList.Add(objTSOServiceDeliveryChainTaskDTO);

                //    }
                //}
                //else
                //{
                //    objTSOServiceDeliveryChainDTOList = new List<TSOServiceDeliveryChainDTO>();
                //    objBusinessLayer = new BusinessLayer(ls);
                //    foreach (TSOServiceDeliveryChain objTSOServiceDeliveryChain in objTask)
                //    {

                //        var objTSOSDeliveryChainDTO = Conversions.ToDTO<TSOServiceDeliveryChainDTO, TSOServiceDeliveryChain>(objTSOServiceDeliveryChain);
                //        objServiceDeliveryTaskDTOList.Add(objTSOSDeliveryChainDTO);

                //    }
                //    totalRecords = objTaskDTOList.Count;

                //}
                //    objTaskDTOList = new List<TSOServiceDeliveryChainDTO>();
                //foreach (TSOServiceDeliveryChain objTSOServiceDeliveryChain in objTask)
                //{

                //    var objTSOServiceDeliveryChainDTO = Conversions.ToDTO<TSOServiceDeliveryChainDTO, TSOServiceDeliveryChain>(objTSOServiceDeliveryChain);

                //    objTaskDTOList.Add(objTSOServiceDeliveryChainDTO);

                //}
                //totalRecords = objTaskDTOList.Count;
                //}
                //else
                //{
                //    totalRecords = 0;
                //}
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objTaskDTOList;
        }



        /// <summary>
        /// GetAllPaged
        /// </summary>
        /// <param name="pageSize">int</param>
        /// <param name="startingRecordNumber">int</param>
        /// <returns>JsonResult<DataCollection>></returns>
        [HttpGet, Route("v1/ServiceDeliveryChainTask/GetAllPaged/{tsoId}/{startingRecordNumber}/{pageSize}")]
        [ResponseType(typeof(DataCollection))]
        [SessionAuthorize(Roles = "Admin,Delivery Manager,Account Manager,Test Manager,Team Lead,PQM,Guest")]
        public JsonResult<DataCollection> GetAllPaged(int tsoId, int startingRecordNumber, int pageSize)
        {
            int totalRecords = 0;
            //IList<TSOServiceDeliveryChainTaskDTO> objTASKDTOList = this.GetAllTask(tsoId, startingRecordNumber, pageSize, out totalRecords);
            IList<TSOServiceDeliveryChainDTO> objTASK1DTOList = this.GetAllTSOServiceDeliveryChain(tsoId, startingRecordNumber, pageSize, out totalRecords);

            DataCollection objDataCollection;

            try
            {
                objDataCollection = new DataCollection { TotalRecords = totalRecords, EntitySummary = new List<IBaseObject>() };
                if (null != objTASK1DTOList)
                {
                    foreach (TSOServiceDeliveryChainDTO objTASK in objTASK1DTOList)
                    {
                        objDataCollection.EntitySummary.Add(objTASK);
                    }
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }

            return Json(objDataCollection, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        }

        /// <summary>
        /// GetTASKCount
        /// </summary>
        /// <param name="strTitleOrClient"></param>
        /// <param name="status"></param>
        /// <param name="tsoId"></param>
        /// <returns></returns>
        [HttpGet, Route("v1/ServiceDeliveryChainTask/GetTASKCount/{strTitleOrClient}/{status}/{tsoId}")]
        [ResponseType(typeof(string))]
        [SessionAuthorize(Roles = "Admin,Account Manager,Delivery Manager,Test Manager,Team Lead,PQM,Guest")]
        public JsonResult<string> GetTASKCount(string strTitleOrClient, int status, int tsoId = 0)
        {
            JsonResult<string> result = Json(string.Empty);
            LoginSession ls = new LoginSession();
            IList<TSOServiceDeliveryChainTask> objTSOServiceDeliveryChainTaskList = null;
            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            try
            {
                IList<TSOServiceDeliveryChain> objTask = null;

                Encryption.CryptorEngine objCryptorEngine = new Encryption.CryptorEngine();
                string userId = Request.Headers.GetValues("userid").FirstOrDefault();
                if (!String.IsNullOrWhiteSpace(userId))
                {
                    userId = userId.Replace("~", "=").Replace("!", "+");
                    string User = objCryptorEngine.Decrypt(userId, true);
                    bool isadmin = User.ToLower().Contains("admin");
                    string[] usrInfo = User.Split('#');
                    User = usrInfo[usrInfo.Length - 2];
                    TSOServiceDeliveryChainTask objtsoTask = null;
                    int userID = Convert.ToInt32(User);

                    if (tsoId > 0)
                    {

                        objTask = objBusinessLayer.TSOServiceDeliveryChainRepository.GetList(x => x.TSOId == tsoId,
                            x => x.ServiceDeliveryChain, x => x.TSOServiceDeliveryChainTasks, x => x.TSO, x => x.TSO.TSR.Client, x => x.TSO.TSR, x => x.TSO.TSR.SolutionCentre);


                        if (objTask != null)
                        {
                            objBusinessLayer = new BusinessLayer(ls);
                            foreach (TSOServiceDeliveryChain objTSOServiceDeliveryChain in objTask)
                            {
                                objTSOServiceDeliveryChainTaskList = objTSOServiceDeliveryChain.TSOServiceDeliveryChainTasks.OrderBy(x => x.WeekNumber).ToList();//  == currentWeek);
                                objtsoTask = objTSOServiceDeliveryChainTaskList.LastOrDefault();
                            }
                        }


                    }
                    else
                    {

                        objBusinessLayer = new BusinessLayer(ls);
                        objTask = objBusinessLayer.TSOServiceDeliveryChainRepository.GetAll(
                                     x => x.ServiceDeliveryChain, x => x.TSOServiceDeliveryChainTasks, x => x.TSO,
                                     x => x.TSO.TSR.Client, x => x.TSO.TSR, x => x.TSO.TSR.SolutionCentre);


                        if (objTask != null)
                        {
                            objBusinessLayer = new BusinessLayer(ls);
                            foreach (TSOServiceDeliveryChain objTSOServiceDeliveryChain in objTask)
                            {
                                objTSOServiceDeliveryChainTaskList = objTSOServiceDeliveryChain.TSOServiceDeliveryChainTasks.ToList();

                            }
                        }

                    }
                    result = Json(objTask.Count().ToString(), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
                }
            }
            catch (DbEntityValidationException eve)
            {
                StringBuilder objSB = new StringBuilder();
                foreach (var objEve in eve.EntityValidationErrors)
                {
                    objSB.Append(String.Format("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:", objEve.Entry.Entity.GetType().Name, objEve.Entry.State));
                    objSB.Append("\n");
                    foreach (var ve in objEve.ValidationErrors)
                    {
                        objSB.Append(String.Format("- Property: \"{0}\", Error: \"{1}\"", ve.PropertyName, ve.ErrorMessage));
                        objSB.Append("\n");
                    }
                }
                TTMLogger.Logger.LogError(String.Format("Error - {0}", objSB.ToString()));
                result = Json(String.Format("Error - {0}", objSB.ToString()), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }


        /// <summary>
        /// Get
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>IHttpActionResult></returns>
        [HttpGet, Route("v1/ServiceDeliveryChainTask/GetById/{id}")]
        [ResponseType(typeof(TSOServiceDeliveryChainTaskDTO))]
        [SessionAuthorize(Roles = "Admin,Delivery Manager,Test Manager,Team Lead, Guest")]
        public JsonResult<TSOServiceDeliveryChainTaskDTO> GetById(int id)
        {

            JsonResult<TSOServiceDeliveryChainTaskDTO> result = null;
            TSOServiceDeliveryChainTaskDTO objTSOTasksDTO;
            try
            {
                objTSOTasksDTO = this.GetTSOTASKById(id);

                result = Json(objTSOTasksDTO, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            return result;
        }

        /// <summary>
        /// GetTSRByTitleOrClient
        /// </summary>
        /// <param name="startingRecordNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="title"></param>
        /// <param name="status"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        [ResponseType(typeof(DataCollection))]
        [HttpGet, Route("v1/ServiceDeliveryChainTask/GetTASKByAdvanceSearch/{pageNumber}/{pageSize}/{tsoId}/{strcenter}/{strclient}/{strid}/{strtitle}/{strstatus}")]
        public JsonResult<DataCollection> GetTASKByAdvanceSearch(int pageNumber, int pageSize, int tsoId, string strcenter, string strclient, int strid, string strtitle, int strstatus)
        {
            LoginSession ls = new LoginSession();
            JsonResult<DataCollection> objReturn = null;
            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            DataCollection objDataCollection;
            IList<TSOServiceDeliveryChain> objTaskList = null;
            int totalRecords = pageSize; ;
            IList<TSOServiceDeliveryChainDTO> objTaskDTOList = new List<TSOServiceDeliveryChainDTO>();
            IList<TSOServiceDeliveryChainDTO> objTaskDTOListNew = new List<TSOServiceDeliveryChainDTO>();
            try
            {
                string sql = "Select chain.*, task.ID, Isnull(task.TSOServiceDeliveryChainId, chain.ID) as TSOServiceDeliveryChainId,task.[Notes],Isnull(task.[PlannedStartDate],GETDATE()) as [PlannedStartDate]" +
                             ",Isnull(task.[PlannedCompletionDate],GETDATE()) as [PlannedCompletionDate],Isnull(task.[PlannedEffort],0) as [PlannedEffort], Isnull(task.[ActualEffort], 0) as [ActualEffort]" +
                             ",Isnull(task.[WeekNumber], 0) as [WeekNumber],Isnull(task.[PlannedProductivity], 0) as [PlannedProductivity],Isnull(task.[ActualProductivity], 0) as [ActualProductivity]" +
                             ",Isnull(task.[PlannedOutcome], 0) as [PlannedOutcome],Isnull(task.[ActualOutcome], 0) as [ActualOutcome],Isnull(task.[PlannedReviewRounds], 0) as [PlannedReviewRounds]" +
                             ",Isnull(task.[ActualReviewRounds], 0) as [ActualReviewRounds],Isnull(task.[CreatedBy], 'Not Yet') as [CreatedBy],Isnull(task.[CreatedOn], GETDATE()) as [CreatedOn]" +
                             ",Isnull(task.[UpdatedBy], 'Not Yet') as [UpdatedBy],Isnull(task.[UpdatedOn], GETDATE()) as [UpdatedOn],Isnull(task.[Version], 0) as [Version],Isnull(task.[DefectRaised],0) as [DefectRaised]" +
                             ", Isnull(task.[DefectRejected], 0) as [DefectRejected],Isnull(task.[PlannedOutcomeRatio], 0) as [PlannedOutcomeRatio],Isnull(task.[ActualOutcomeRatio], 0) as [ActualOutcomeRatio],Isnull(task.[PlannedInput], 0) as [PlannedInput]" +
                             ",Isnull(task.[ActualInput], 0) as [ActualInput],Isnull(task.[PlannedProcessingTime], 0) as [PlannedProcessingTime],Isnull(task.[ActualProcessingTime], 0) as [ActualProcessingTime],Isnull(task.[TaskStatusId], 0) as [TaskStatusId]" +
                             ",Isnull(task.[IdleTimeEffort], 0) as [IdleTimeEffort],Isnull(task.[IdleTimeDuration], 0) as [IdleTimeDuration],Isnull(task.[Headcount], 0) as [Headcount]" +
                             ",Isnull(task.[ServiceDeliveryChainMethodId], 0) as [ServiceDeliveryChainMethodId],Isnull(task.[PlannedOutcomeTestSteps],0) as [PlannedOutcomeTestSteps],Isnull(task.[ActualOutcomeTestSteps],0) as [ActualOutcomeTestSteps], tso.*, tsr.*,serv.*,cli.* " +
                             "from TSOServiceDeliveryChain as chain " +
                             "left join  TSOServiceDeliveryChainTask as task  on task.TSOServiceDeliveryChainId = chain.ID " +
                             "inner join TSO as tso on chain.TSOId = tso.id " +
                             "inner join TSR as tsr on tso.TSRId = tsr.id " +
                             "inner join ServiceDeliveryChain as serv on chain.ServiceDeliveryChainId = serv.id " +
                             "inner join Client as cli on tsr.ClientId = cli.Id where";

                if (strid > 0)
                {
                    sql = sql + " chain.ID = " + strid;
                }

                if (tsoId > 0)
                {
                    if (sql.IndexOf("where") != sql.Length - 5)
                    {
                        sql = sql + " and tso.Id = " + tsoId;
                    }
                    else
                    {
                        sql = sql + " tso.Id = " + tsoId;
                    }
                }

                if (strcenter != "none")
                {
                    if (sql.IndexOf("where") != sql.Length - 5)
                    {
                        sql = sql + " and tso.Title like '%" + strcenter + "%'";
                    }
                    else
                    {
                        sql = sql + " tso.Title like '%" + strcenter + "%'";
                    }
                }

                if (strclient != "none")
                {
                    if (sql.IndexOf("where") != sql.Length - 5)
                    {
                        sql = sql + " and cli.Name like '%" + strclient + "%'";
                    }
                    else
                    {
                        sql = sql + " cli.Name like '%" + strclient + "%'";
                    }
                }

                if (strtitle != "none")
                {
                    strtitle = strtitle.Replace("(", "");
                    strtitle = strtitle.Replace(")", "");
                    if (sql.IndexOf("where") != sql.Length - 5)
                    {
                        sql = sql + " and serv.Description like '%" + strtitle + "%'";
                    }
                    else
                    {
                        sql = sql + " serv.Description like '%" + strtitle + "%'";
                    }
                }

                if (strstatus > 0)
                {
                    if (sql.IndexOf("where") != sql.Length - 5)
                    {
                        sql = sql + " and task.TaskStatusId = " + strstatus;
                    }
                    else
                    {
                        sql = sql + " task.TaskStatusId = " + strstatus;
                    }
                }


                sql = sql + " ORDER BY task.id OFFSET " + ((pageNumber - 1) * pageSize) + " ROWS FETCH NEXT " + pageSize + " ROWS ONLY";

                objTaskList = objBusinessLayer.TSOServiceDeliveryChainRepository.GetWithRawSql(sql);


                TSOServiceDeliveryChainTaskDTO objTaskDTO = new TSOServiceDeliveryChainTaskDTO();
                foreach (TSOServiceDeliveryChain objTask in objTaskList)
                {
                    objBusinessLayer = new BusinessLayer(ls);
                    objTask.ServiceDeliveryChain = objBusinessLayer.ServiceDeliveryChainRepository.GetByID(objTask.ServiceDeliveryChainId);

                    objBusinessLayer = new BusinessLayer(ls);
                    objTask.TSO = objBusinessLayer.TSORepository.GetSingle(x => x.ID == objTask.TSOId,
                    x => x.TeamLead,
                    x => x.OperationalRisk,
                    x => x.TSOServiceDeliveryChains,
                    x => x.TSOStatus,
                    x => x.TSR);

                    objBusinessLayer = new BusinessLayer(ls);
                    objTask.TSO.TSR.Client = objBusinessLayer.ClientRepository.GetByID(objTask.TSO.TSR.ClientId);

                    objBusinessLayer = new BusinessLayer(ls);
                    List<TSOServiceDeliveryChainTask> objTSOServiceDeliveryChainTaskList = objTask.TSOServiceDeliveryChainTasks.Where(x => x.TSOServiceDeliveryChainId == objTask.ID).OrderBy(x => x.WeekNumber).ToList();//  == currentWeek);
                    TSOServiceDeliveryChainTask objtsoTask = objTSOServiceDeliveryChainTaskList.LastOrDefault();
                    if (null != objtsoTask)
                    {
                        var objTSOSDeliveryChainTaskDTO = Conversions.ToDTO<TSOServiceDeliveryChainTaskDTO, TSOServiceDeliveryChainTask>(objtsoTask);

                        var objTSOSDeliveryChainDTO = Conversions.ToDTO<TSOServiceDeliveryChainDTO, TSOServiceDeliveryChain>(objTask);
                        objTSOSDeliveryChainDTO.TSOServiceDeliveryChainTasks.Clear();

                        objTSOSDeliveryChainDTO.TaskStatus = GetTaskStatus(objTSOSDeliveryChainTaskDTO.TaskStatusId);

                        objTSOSDeliveryChainDTO.TSOServiceDeliveryChainTasks.Add(objTSOSDeliveryChainTaskDTO);
                        objTaskDTOList.Add(objTSOSDeliveryChainDTO);
                    }
                    else
                    {
                        var objTSOSDeliveryChainDTO = Conversions.ToDTO<TSOServiceDeliveryChainDTO, TSOServiceDeliveryChain>(objTask);
                        objTSOSDeliveryChainDTO.TaskStatus = "not started";
                        objTaskDTOList.Add(objTSOSDeliveryChainDTO);
                    }



                    //TSOServiceDeliveryChain chekTask = objTaskList.Where(x => x.ID == objTask.ID).OrderByDescending(x => x.WeekNumber).FirstOrDefault();

                    //if (chekTask.TaskStatusId > 0)
                    //{
                    //    objBusinessLayer = new BusinessLayer(ls);
                    //    chekTask.TaskStatus = objBusinessLayer.TaskStatusRepository.GetSingle(x => x.ID == chekTask.TaskStatusId);
                    //}

                    //objBusinessLayer = new BusinessLayer(ls);
                    //chekTask.TSOServiceDeliveryChain = objBusinessLayer.TSOServiceDeliveryChainRepository.GetSingle(x => x.ID == chekTask.TSOServiceDeliveryChainId, x => x.ServiceDeliveryChain, x => x.TSO);

                    //if (chekTask.TSOServiceDeliveryChain != null)
                    //{
                    //    if (chekTask.TSOServiceDeliveryChain.TSO != null)
                    //    {
                    //        objBusinessLayer = new BusinessLayer(ls);
                    //        chekTask.TSOServiceDeliveryChain.TSO.TSR = objBusinessLayer.TSRRepository.GetSingle(x => x.ID == chekTask.TSOServiceDeliveryChain.TSO.TSRId, x => x.Client);
                    //    }
                    //}

                    //objTaskDTO = Conversions.ToDTO<TSOServiceDeliveryChainTaskDTO, TSOServiceDeliveryChainTask>(chekTask);

                    //bool canAdd = true;
                    //if (objTaskDTOList.Count > 0)
                    //{
                    //    foreach (TSOServiceDeliveryChainTaskDTO task in objTaskDTOList)
                    //    {
                    //        if (task.ID == objTaskDTO.ID)
                    //        {
                    //            canAdd = false;
                    //        }
                    //    }
                    //}

                    //if (canAdd)
                    //{
                    //    objTaskDTOList.Add(objTaskDTO);
                    //}
                }
                totalRecords = objTaskList.Count();

                try
                {
                    objDataCollection = new DataCollection { TotalRecords = totalRecords, EntitySummary = new List<IBaseObject>() };
                    if (null != objTaskDTOList)
                    {
                        foreach (TSOServiceDeliveryChainDTO objTASK in objTaskDTOList)
                        {
                            objDataCollection.EntitySummary.Add(objTASK);
                        }
                    }
                }
                catch (Exception ex)
                {
                    TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                    throw;
                }

                objReturn = Json(objDataCollection, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }
            return Json(objDataCollection, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects }); ;
        }

        /// <summary>
        /// CreateTSR
        /// </summary>
        /// <param name="tsrDTO">TSRDTO</param>
        /// <returns>JsonResult<string></returns>
        [HttpGet, Route("v1/ServiceDeliveryChainTask/GetTASKByAdvanceSearchCount/{tsoId}/{strcenter}/{strclient}/{strid}/{strtitle}/{strstatus}")]
        [ResponseType(typeof(string))]
        [SessionAuthorize(Roles = "Admin,Account Manager,Delivery Manager,Test Manager,Team Lead,PQM,Guest")]
        public JsonResult<string> GetTASKByAdvanceSearchCount(int tsoId, string strcenter, string strclient, int strid, string strtitle, int strstatus)
        {
            JsonResult<string> result = Json(string.Empty);
            LoginSession ls = new LoginSession();
            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            try
            {
                IList<TSOServiceDeliveryChainTask> objTaskList;// = objBusinessLayer.TSRRepository.GetAll(x => x.TSRStatus, x => x.TestManager, x => x.AccountManager, x => x.DeliveryManager, x => x.Engagement, x => x.OperationalRisk, x => x.Vertical, x => x.Practice, x => x.SolutionCentre, x => x.Client, x => x.ClientRegion, x => x.PricingModel, x => x.MarketOffering, x => x.OperationalRisk, x => x.TSRReleventRepositories, x => x.TSRCoreServices);
                string sql = "Select chain.*, task.ID, Isnull(task.TSOServiceDeliveryChainId, 0) as TSOServiceDeliveryChainId,task.[Notes],Isnull(task.[PlannedStartDate],GETDATE()) as [PlannedStartDate]" +
                             ",Isnull(task.[PlannedCompletionDate],GETDATE()) as [PlannedCompletionDate],Isnull(task.[PlannedEffort],0) as [PlannedEffort], Isnull(task.[ActualEffort], 0) as [ActualEffort]" +
                             ",Isnull(task.[WeekNumber], 0) as [WeekNumber],Isnull(task.[PlannedProductivity], 0) as [PlannedProductivity],Isnull(task.[ActualProductivity], 0) as [ActualProductivity]" +
                             ",Isnull(task.[PlannedOutcome], 0) as [PlannedOutcome],Isnull(task.[ActualOutcome], 0) as [ActualOutcome],Isnull(task.[PlannedReviewRounds], 0) as [PlannedReviewRounds]" +
                             ",Isnull(task.[ActualReviewRounds], 0) as [ActualReviewRounds],Isnull(task.[CreatedBy], 'Not Yet') as [CreatedBy],Isnull(task.[CreatedOn], GETDATE()) as [CreatedOn]" +
                             ",Isnull(task.[UpdatedBy], 'Not Yet') as [UpdatedBy],Isnull(task.[UpdatedOn], GETDATE()) as [UpdatedOn],Isnull(task.[Version], 0) as [Version],Isnull(task.[DefectRaised],0) as [DefectRaised]" +
                             ", Isnull(task.[DefectRejected], 0) as [DefectRejected],Isnull(task.[PlannedOutcomeRatio], 0) as [PlannedOutcomeRatio],Isnull(task.[ActualOutcomeRatio], 0) as [ActualOutcomeRatio],Isnull(task.[PlannedInput], 0) as [PlannedInput]" +
                             ",Isnull(task.[ActualInput], 0) as [ActualInput],Isnull(task.[PlannedProcessingTime], 0) as [PlannedProcessingTime],Isnull(task.[ActualProcessingTime], 0) as [ActualProcessingTime],Isnull(task.[TaskStatusId], 0) as [TaskStatusId]" +
                             ",Isnull(task.[IdleTimeEffort], 0) as [IdleTimeEffort],Isnull(task.[IdleTimeDuration], 0) as [IdleTimeDuration],Isnull(task.[Headcount], 0) as [Headcount]" +
                             ",Isnull(task.[ServiceDeliveryChainMethodId], 0) as [ServiceDeliveryChainMethodId],Isnull(task.[PlannedOutcomeTestSteps],0) as [PlannedOutcomeTestSteps],Isnull(task.[ActualOutcomeTestSteps],0) as [ActualOutcomeTestSteps], tso.*, tsr.*,serv.*,cli.* " +
                             "from TSOServiceDeliveryChain as chain " +
                             "left join  TSOServiceDeliveryChainTask as task  on task.TSOServiceDeliveryChainId = chain.ID " +
                             "inner join TSO as tso on chain.TSOId = tso.id " +
                             "inner join TSR as tsr on tso.TSRId = tsr.id " +
                             "inner join ServiceDeliveryChain as serv on chain.ServiceDeliveryChainId = serv.id " +
                             "inner join Client as cli on tsr.ClientId = cli.Id where";

                if (strid > 0)
                {
                    sql = sql + " chain.ID = " + strid;
                }

                if (tsoId > 0)
                {
                    if (sql.IndexOf("where") != sql.Length - 5)
                    {
                        sql = sql + " and tso.Id = " + tsoId;
                    }
                    else
                    {
                        sql = sql + " tso.Id = " + tsoId;
                    }
                }

                if (strcenter != "none")
                {
                    if (sql.IndexOf("where") != sql.Length - 5)
                    {
                        sql = sql + " and tso.Title like '%" + strcenter + "%'";
                    }
                    else
                    {
                        sql = sql + " tso.Title like '%" + strcenter + "%'";
                    }
                }

                if (strclient != "none")
                {
                    if (sql.IndexOf("where") != sql.Length - 5)
                    {
                        sql = sql + " and cli.Name like '%" + strclient + "%'";
                    }
                    else
                    {
                        sql = sql + " cli.Name like '%" + strclient + "%'";
                    }
                }

                if (strtitle != "none")
                {
                    strtitle = strtitle.Replace("(", "");
                    strtitle = strtitle.Replace(")", "");
                    if (sql.IndexOf("where") != sql.Length - 5)
                    {
                        sql = sql + " and serv.Description like '%" + strtitle + "%'";
                    }
                    else
                    {
                        sql = sql + " serv.Description like '%" + strtitle + "%'";
                    }
                }

                if (strstatus > 0)
                {
                    if (sql.IndexOf("where") != sql.Length - 5)
                    {
                        sql = sql + " and task.TaskStatusId = " + strstatus;
                    }
                    else
                    {
                        sql = sql + " task.TaskStatusId = " + strstatus;
                    }
                }

                objTaskList = objBusinessLayer.TSOServiceDeliveryChainTaskRepository.GetWithRawSql(sql);

                result = Json(objTaskList.Count.ToString(), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (DbEntityValidationException eve)
            {
                StringBuilder objSB = new StringBuilder();
                foreach (var objEve in eve.EntityValidationErrors)
                {
                    objSB.Append(String.Format("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:", objEve.Entry.Entity.GetType().Name, objEve.Entry.State));
                    objSB.Append("\n");
                    foreach (var ve in objEve.ValidationErrors)
                    {
                        objSB.Append(String.Format("- Property: \"{0}\", Error: \"{1}\"", ve.PropertyName, ve.ErrorMessage));
                        objSB.Append("\n");
                    }
                }
                TTMLogger.Logger.LogError(String.Format("Error - {0}", objSB.ToString()));
                result = Json(String.Format("Error - {0}", objSB.ToString()), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        public string GetTaskStatus(int statusId)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            string status = null;
            try
            {
                TaskStatus objTaskStatus = objBusinessLayer.TaskStatusRepository.GetSingle(x => x.ID == statusId);
                status = objTaskStatus.Name;
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }
            return status;
        }
    }
}