using Newtonsoft.Json;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using TTMAPI.Models;

namespace TTMAPI.Helpers {

    /// <summary>
    /// Helper class to read data from SQL DB
    /// Serializes returned data for API JSON feed
    /// </summary>
    public static class DataHelper {

        /// <summary>
        /// Gets all tasks.
        /// </summary>
        /// <returns>Collection of <seealso cref="TTMTask"/></returns>
        public static IEnumerable<TTMTask> GetAllTasks() {
            DataTable dt = GetData();
            string json = GetJson(dt);
            return GetTasks(json);
        }

        /// <summary>
        /// Fills datatable from SQL DB
        /// </summary>
        /// <returns>Datatable containing tasks from SQL stored proc</returns>
        private static DataTable GetData() {
            DataTable dataTable = new DataTable();
            using (SqlConnection conn =
                new SqlConnection(ConfigurationManager
                   .ConnectionStrings["SqlConnection"]
                   .ConnectionString)) {
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandText = ConfigurationManager.AppSettings["StoredProc"];
                cmd.CommandType = CommandType.StoredProcedure;

                if (conn.State != ConnectionState.Open) {
                    conn.Open();
                }

                SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.CloseConnection);

                dataTable.Load(dr);
            }
            return dataTable;
        }

        /// <summary>
        /// Gets the json.
        /// </summary>
        /// <param name="dt">Datatable from GetData method</param>
        /// <returns>Serialized JSON string</returns>
        private static string GetJson(DataTable dt) {
            return JsonConvert.SerializeObject(dt, Formatting.Indented);
        }

        /// <summary>
        /// Gets the tasks.
        /// </summary>
        /// <param name="json">Serialized JSON string from GetJson method</param>
        /// <returns>Collection of <seealso cref="TTMTask"/></returns>
        private static IEnumerable<TTMTask> GetTasks(string json) {
            return JsonConvert.DeserializeObject<List<TTMTask>>(json);
        }
    }
}