/******************************************************************************
 *                          © 2017 SQS India                            *
 *                          All Rights Reserved.                              *
 *                                                                            *
 ******************************************************************************
 *
 * Modification History:
 * 
 * AKS 04Oct2017 Created the class
 *******************************************************************************/

namespace SQS.nTier.TTM.WebAPI.Controllers
{
    using BAL;
    using Common;
    using DAL;
    using DTO;
    using GenericFramework;
    using GenericFramework.Utility;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Web.Http;
    using System.Web.Http.Description;
    using System.Web.Http.Results;

    /// <summary>
    /// ServiceDeliveryChainController
    /// </summary>
    [RoutePrefix("api")]
    public class ServiceDeliveryChainController : ApiController
    {
        #region Private Functions

        /// <summary>
        /// GetServiceDeliveryChainById
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>ServiceDeliveryChain</returns>
        private ServiceDeliveryChainDTO GetServiceDeliveryChainById(int id)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            ServiceDeliveryChainDTO objServiceDeliveryChainDTO = null;

            try
            {
                ServiceDeliveryChain objServiceDeliveryChain = objBusinessLayer.ServiceDeliveryChainRepository.GetByID(id);
                if (null != objServiceDeliveryChain)
                {
                    objServiceDeliveryChainDTO = new ServiceDeliveryChainDTO();
                    objServiceDeliveryChainDTO = Conversions.ToDTO<ServiceDeliveryChainDTO, ServiceDeliveryChain>(objServiceDeliveryChain);
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objServiceDeliveryChainDTO;
        }

        /// <summary>
        /// GetAllServiceDeliveryChain
        /// </summary>
        /// <returns>IList<ServiceDeliveryChain>></returns>
        private IList<ServiceDeliveryChainDTO> GetAllServiceDeliveryChain(int startingRecordNumber, int pageSize, out int totalRecords)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<ServiceDeliveryChainDTO> objServiceDeliveryChainDTOList = null;
            try
            {
                IList<ServiceDeliveryChain> objServiceDeliveryChainList = objBusinessLayer.ServiceDeliveryChainRepository.GetAll(startingRecordNumber, pageSize, x => x.DisplayOrder, false, out totalRecords);
                if (objServiceDeliveryChainList != null && objServiceDeliveryChainList.Count > 0)
                {
                    objServiceDeliveryChainDTOList = new List<ServiceDeliveryChainDTO>();

                    foreach (ServiceDeliveryChain objServiceDeliveryChain in objServiceDeliveryChainList)
                    {
                        ServiceDeliveryChainDTO objServiceDeliveryChainDTO = new ServiceDeliveryChainDTO();
                        objServiceDeliveryChainDTO = Conversions.ToDTO<ServiceDeliveryChainDTO, ServiceDeliveryChain>(objServiceDeliveryChain);

                        objServiceDeliveryChainDTOList.Add(objServiceDeliveryChainDTO);
                    }
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objServiceDeliveryChainDTOList;
        }

        /// <summary>
        /// Function to add new ServiceDeliveryChain 
        /// </summary>
        /// <param name="objServiceDeliveryChain"></param>
        /// <returns></returns>
        private string AddNewServiceDeliveryChain(ServiceDeliveryChainDTO objServiceDeliveryChainDTO)
        {
            string returnMessage = string.Empty;

            LoginSession ls = new LoginSession();
            ls.LoginName = objServiceDeliveryChainDTO.CreatedBy;

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            try
            {
                bool result = CheckNameExists(objServiceDeliveryChainDTO.Name);
                if (result == true)
                {
                    ServiceDeliveryChain objServiceDeliveryChain = Conversions.ToEntity<ServiceDeliveryChainDTO, ServiceDeliveryChain>(objServiceDeliveryChainDTO);
                    objBusinessLayer.ServiceDeliveryChainRepository.Add(objServiceDeliveryChain);
                    returnMessage = "Service Delivery Chain added successfully.";
                }
                else
                {
                    returnMessage = "This " + objServiceDeliveryChainDTO.Name + " Service Delivery Chain already exists.";
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.InnerException.InnerException.Message));
                if (ex.InnerException.InnerException.Message.Contains("REFERENCE constraint"))
                    throw new Exception("Specified service delivery chain mapped with TSR / TSO.");
                else if (ex.InnerException.InnerException.Message.Contains("UNIQUE KEY constraint"))
                    throw new Exception("Specified display order already exist.");
                else
                    throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return returnMessage;
        }
        private bool CheckNameExists(string Name)
        {
            LoginSession ls = new LoginSession();
            ls.LoginName = "Admin";
            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            var CheckNameExists = objBusinessLayer.ServiceDeliveryChainRepository.GetSingle(x => x.Name == Name);
            if (CheckNameExists == null)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <summary>
        /// Function to update ServiceDeliveryChain 
        /// </summary>
        /// <param name="objServiceDeliveryChain"></param>
        /// <returns></returns>
        private string ModifyServiceDeliveryChain(int ID, ServiceDeliveryChainDTO objServiceDeliveryChainDTO)
        {

            string returnMessage = string.Empty;
            LoginSession ls = null;
            IBusinessLayer objBusinessLayer = null;
            try
            {
                ServiceDeliveryChainDTO objServiceDeliveryChainDTOById = this.GetServiceDeliveryChainById(ID);

                if (objServiceDeliveryChainDTOById != null)
                {
                    ls = new LoginSession();
                    ls.LoginName = objServiceDeliveryChainDTO.CreatedBy;

                    objBusinessLayer = new BusinessLayer(ls);
                    bool result = CheckNameExists(objServiceDeliveryChainDTO.Name);
                    if (result == true)
                    {
                        objServiceDeliveryChainDTOById.Name = objServiceDeliveryChainDTO.Name;
                        objServiceDeliveryChainDTOById.Description = objServiceDeliveryChainDTO.Description;
                        objServiceDeliveryChainDTOById.DisplayOrder = objServiceDeliveryChainDTO.DisplayOrder;
                        returnMessage = "Service Delivery Chain updated successfully.";
                    }
                    else
                    {
                        objServiceDeliveryChainDTOById.Description = objServiceDeliveryChainDTO.Description;
                        returnMessage = "This " + objServiceDeliveryChainDTO.Name + " Service Delivery Chain already exists.";
                    }
                    ServiceDeliveryChain objServiceDeliveryChain = Conversions.ToEntity<ServiceDeliveryChainDTO, ServiceDeliveryChain>(objServiceDeliveryChainDTOById);

                    objBusinessLayer.ServiceDeliveryChainRepository.Update(objServiceDeliveryChain);


                }
                else
                {
                    returnMessage = "Service Delivery Chain do not exists.";
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                if (null != objBusinessLayer)
                    objBusinessLayer.Dispose();
            }
            return returnMessage;
        }

        /// <summary>
        /// DeleteServiceDeliveryChain
        /// </summary>
        /// <param name="objServiceDeliveryChainDTO">ServiceDeliveryChainDTO</param>
        private string RemoveServiceDeliveryChain(int ID)
        {
            string returnMessage = string.Empty;
            LoginSession ls = null;
            IBusinessLayer objBusinessLayer = null;
            try
            {
                ServiceDeliveryChainDTO objServiceDeliveryChainDTOById = this.GetServiceDeliveryChainById(ID);

                if (objServiceDeliveryChainDTOById != null)
                {
                    ls = new LoginSession();
                    ls.LoginName = "Admin";

                    objBusinessLayer = new BusinessLayer(ls);

                    ServiceDeliveryChain objServiceDeliveryChain = Conversions.ToEntity<ServiceDeliveryChainDTO, ServiceDeliveryChain>(objServiceDeliveryChainDTOById);
                    objBusinessLayer.ServiceDeliveryChainRepository.Delete(objServiceDeliveryChain);
                    returnMessage = "Service Delivery Chain deleted successfully.";

                }
                else
                {
                    returnMessage = "Service Delivery Chain do not exists.";
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.InnerException.InnerException.Message));
                if (ex.InnerException.InnerException.Message.Contains("REFERENCE constraint"))
                    throw new Exception("Specified service delivery chain mapped with TSR / TSO.");
                else
                    throw;
            }
            finally
            {
                ls = null;
                if (null != objBusinessLayer)
                    objBusinessLayer.Dispose();
            }
            return returnMessage;
        }

        #endregion

        #region internal functions

        /// <summary>
        /// GetServiceDeliveryChainIDNameList
        /// </summary>
        /// <returns>IList<IDName></returns>
        internal IList<IDName> GetServiceDeliveryChainIDNameList()
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<IDName> objServiceDeliveryChainList = null;
            try
            {
                objServiceDeliveryChainList = objBusinessLayer.ServiceDeliveryChainRepository.GetPartial<IDName>(x => new IDName { ID = x.ID, Name = x.Name, Other = x.DisplayOrder.ToString() });

                objServiceDeliveryChainList = objServiceDeliveryChainList.OrderBy(x => int.Parse(x.Other)).ToList();
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objServiceDeliveryChainList;
        }

        #endregion

        [HttpGet, Route("v1/ServiceDeliveryChain/GetAllIDName")]
        [ResponseType(typeof(IList<IDName>))]
        public JsonResult<IList<IDName>> GetAllIDName()
        {
            IList<IDName> objServiceDeliveryChainList = null;

            try
            {
                objServiceDeliveryChainList = this.GetServiceDeliveryChainIDNameList();
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            return Json(objServiceDeliveryChainList, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        }

        /// <summary>
        /// Get
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>IHttpActionResult></returns>
        [HttpGet, Route("v1/ServiceDeliveryChain/GetById/{id}")]
        [ResponseType(typeof(ServiceDeliveryChain))]
        public JsonResult<ServiceDeliveryChainDTO> GetById(int id)
        {
            JsonResult<ServiceDeliveryChainDTO> result = null;
            ServiceDeliveryChainDTO objServiceDeliveryChainDTO;

            try
            {
                objServiceDeliveryChainDTO = this.GetServiceDeliveryChainById(id);

                result = Json(objServiceDeliveryChainDTO, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            return result;
        }

        /// <summary>
        /// GetAllPaged
        /// </summary>
        /// <param name="pageSize">int</param>
        /// <param name="startingRecordNumber">int</param>
        /// <returns>JsonResult<DataCollection>></returns>
        [HttpGet, Route("v1/ServiceDeliveryChain/GetAllPaged/{startingRecordNumber}/{pageSize}")]
        [ResponseType(typeof(DataCollection))]
        public JsonResult<DataCollection> GetAllPaged(int startingRecordNumber, int pageSize)
        {
            int totalRecords = 0;
            IList<ServiceDeliveryChainDTO> objServiceDeliveryChainDTOList = this.GetAllServiceDeliveryChain(startingRecordNumber, pageSize, out totalRecords);

            DataCollection objDataCollection;

            try
            {
                objDataCollection = new DataCollection { TotalRecords = totalRecords, EntitySummary = new List<IBaseObject>() };
                if (null != objServiceDeliveryChainDTOList)
                {
                    foreach (ServiceDeliveryChainDTO objServiceDeliveryChain in objServiceDeliveryChainDTOList)
                    {
                        objDataCollection.EntitySummary.Add(objServiceDeliveryChain);
                    }
                }
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                throw;
            }
            return Json(objDataCollection, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        }

        /// <summary>
        /// CreateCoreService
        /// </summary>
        /// <param name="coreServiceDTO">ServiceDeliveryChainDTO</param>
        /// <returns>JsonResult<string></returns>
        [HttpPost, Route("v1/ServiceDeliveryChain/CreateServiceDeliveryChain")]
        [ResponseType(typeof(string))]
        public JsonResult<string> CreateServiceDeliveryChain([FromBody]ServiceDeliveryChainDTO clientRegionDTO)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {
                result = Json(this.AddNewServiceDeliveryChain(clientRegionDTO), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// UpdateServiceDeliveryChain
        /// </summary>
        /// <param name="ID">int</param>
        /// <param name="clientRegionDTO">ServiceDeliveryChainDTO</param>
        /// <returns>JsonResult<string></returns>
        [ResponseType(typeof(string))]
        [HttpPut, Route("v1/ServiceDeliveryChain/UpdateServiceDeliveryChain/{ID}")]
        public JsonResult<string> UpdateServiceDeliveryChain(int ID, [FromBody]ServiceDeliveryChainDTO clientRegionDTO)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {
                result = Json(this.ModifyServiceDeliveryChain(ID, clientRegionDTO), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                if (ex.InnerException != null && ex.InnerException.InnerException != null && !String.IsNullOrWhiteSpace(ex.InnerException.InnerException.Message))
                {
                    String duplicateOrder = ex.InnerException.InnerException.Message.Replace("Violation of UNIQUE KEY constraint 'IX_ServiceDeliveryChain'. Cannot insert duplicate key in object 'dbo.ServiceDeliveryChain'. The duplicate key value is (", String.Empty).Replace(").\r\nThe statement has been terminated.", string.Empty);

                    result = Json(String.Format("Error - Display order {0} already exists.", duplicateOrder), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
                }
                else
                    result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// DeleteServiceDeliveryChain
        /// </summary>
        /// <param name="ID">int</param>
        /// <returns>JsonResult<string></returns>
        [ResponseType(typeof(string))]
        [HttpDelete, Route("v1/ServiceDeliveryChain/DeleteServiceDeliveryChain/{ID}")]
        public JsonResult<string> DeleteServiceDeliveryChain(int ID)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {
                result = Json(this.RemoveServiceDeliveryChain(ID), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                TTMLogger.Logger.LogError(String.Format("Error - {0}", ex.Message));
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// Dispose
        /// </summary>
        /// <param name="disposing"></param>
        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

    }
}
