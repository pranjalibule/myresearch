/******************************************************************************
 *                          © 2017 SQS India                            *
 *                          All Rights Reserved.                              *
 *                                                                            *
 ******************************************************************************
 *
 * Modification History:
 * 
 * AKS 04Oct2017 Created the class
 *******************************************************************************/

namespace SQS.nTier.TTM.WebAPI.Controllers
{
    using BAL;
    using Common;
    using DAL;
    using DTO;
    using GenericFramework;
    using GenericFramework.Utility;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Web.Http;
    using System.Web.Http.Description;
    using System.Web.Http.Results;

    /// <summary>
    /// ProjectModelController
    /// </summary>
    [RoutePrefix("api")]
    public class ProjectModelController : ApiController
    {
        #region Private Functions

        /// <summary>
        /// GetProjectModelById
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>ProjectModel</returns>
        private ProjectModelDTO GetProjectModelById(int id)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            ProjectModelDTO objProjectModelDTO = null;

            try
            {
                ProjectModel objProjectModel = objBusinessLayer.ProjectModelRepository.GetByID(id);
                if (null != objProjectModel)
                {
                    objProjectModelDTO = new ProjectModelDTO();
                    objProjectModelDTO = Conversions.ToDTO<ProjectModelDTO, ProjectModel>(objProjectModel);
                }
            }
            catch
            {
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objProjectModelDTO;
        }


        /// <summary>
        /// GetProjectModelNameById
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>ProjectModel</returns>
        public string GetProjectModelNameById(int id)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            string pmName = "";
            try
            {
                ProjectModel objProjectModel = objBusinessLayer.ProjectModelRepository.GetByID(id);
                if (null != objProjectModel)
                {
                    ProjectModelDTO objProjectModelDTO = new ProjectModelDTO();
                    objProjectModelDTO = Conversions.ToDTO<ProjectModelDTO, ProjectModel>(objProjectModel);
                    pmName = objProjectModelDTO.Name;
                }
            }
            catch
            {
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return pmName;
        }

        /// <summary>
        /// GetAllProjectModel
        /// </summary>
        /// <returns>IList<ProjectModel>></returns>
        private IList<ProjectModelDTO> GetAllProjectModel(int startingRecordNumber, int pageSize, out int totalRecords)
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<ProjectModelDTO> objProjectModelDTOList = null;
            try
            {
                IList<ProjectModel> objProjectModelList = objBusinessLayer.ProjectModelRepository.GetAll(startingRecordNumber, pageSize, x => x.ID, false, out totalRecords);
                if (objProjectModelList != null && objProjectModelList.Count > 0)
                {
                    objProjectModelDTOList = new List<ProjectModelDTO>();

                    foreach (ProjectModel objProjectModel in objProjectModelList)
                    {
                        ProjectModelDTO objProjectModelDTO = new ProjectModelDTO();
                        objProjectModelDTO = Conversions.ToDTO<ProjectModelDTO, ProjectModel>(objProjectModel);

                        objProjectModelDTOList.Add(objProjectModelDTO);
                    }
                }
            }
            catch
            {
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objProjectModelDTOList;
        }

        /// <summary>
        /// Function to add new ProjectModel 
        /// </summary>
        /// <param name="objProjectModelDTO">ProjectModelDTO</param>
        /// <returns>string</returns>
        private string AddNewProjectModel(ProjectModelDTO objProjectModelDTO)
        {
            string returnMessage = string.Empty;

            LoginSession ls = new LoginSession();
            ls.LoginName = "Admin";

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);
            try
            {
                ProjectModel objProjectModel = Conversions.ToEntity<ProjectModelDTO, ProjectModel>(objProjectModelDTO);
                objBusinessLayer.ProjectModelRepository.Add(objProjectModel);
                returnMessage = "Project Model added successfully.";
            }
            catch
            {
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return returnMessage;
        }

        /// <summary>
        /// Function to update ProjectModel 
        /// </summary>
        /// <param name="objProjectModelDTO">ProjectModelDTO</param>
        /// <returns>string</returns>
        private string ModifyProjectModel(int ID, ProjectModelDTO objProjectModelDTO)
        {

            string returnMessage = string.Empty;
            LoginSession ls = null;
            IBusinessLayer objBusinessLayer = null;
            try
            {
                ProjectModelDTO objProjectModelDTOById = this.GetProjectModelById(ID);

                if (objProjectModelDTOById != null)
                {
                    ls = new LoginSession();
                    ls.LoginName = "Admin";

                    objBusinessLayer = new BusinessLayer(ls);

                    objProjectModelDTOById.Name = objProjectModelDTO.Name;
                    objProjectModelDTOById.Description = objProjectModelDTO.Description;

                    ProjectModel objProjectModel = Conversions.ToEntity<ProjectModelDTO, ProjectModel>(objProjectModelDTOById);

                    objBusinessLayer.ProjectModelRepository.Update(objProjectModel);
                    returnMessage = "Project Model updated successfully.";

                }
                else
                {
                    returnMessage = "Project Model do not exists.";
                }
            }
            catch
            {
                throw;
            }
            finally
            {
                ls = null;
                if (null != objBusinessLayer)
                    objBusinessLayer.Dispose();
            }
            return returnMessage;
        }

        /// <summary>
        /// RemoveProjectModel
        /// </summary>
        /// <param name="ID">int</param>
        /// <returns>string</returns>
        private string RemoveProjectModel(int ID)
        {
            string returnMessage = string.Empty;
            LoginSession ls = null;
            IBusinessLayer objBusinessLayer = null;
            try
            {
                ProjectModelDTO objProjectModelDTOById = this.GetProjectModelById(ID);

                if (objProjectModelDTOById != null)
                {
                    ls = new LoginSession();
                    ls.LoginName = "Admin";

                    objBusinessLayer = new BusinessLayer(ls);

                    ProjectModel objProjectModel = Conversions.ToEntity<ProjectModelDTO, ProjectModel>(objProjectModelDTOById);
                    objBusinessLayer.ProjectModelRepository.Delete(objProjectModel);
                    returnMessage = "Project Model deleted successfully.";

                }
                else
                {
                    returnMessage = "Project Model do not exists.";
                }
            }
            catch (Exception ex)
            {
                if (ex.InnerException.InnerException.Message.Contains("REFERENCE constraint"))
                    throw new Exception("Specified project model mapped with TSR / TSO.");
                else
                    throw;
            }
            finally
            {
                ls = null;
                if (null != objBusinessLayer)
                    objBusinessLayer.Dispose();
            }
            return returnMessage;
        }

        #endregion

        #region internal functions

        /// <summary>
        /// GetProjectModelIDNameList
        /// </summary>
        /// <returns>IList<IDName></returns>
        internal IList<IDName> GetProjectModelIDNameList()
        {
            LoginSession ls = new LoginSession();

            IBusinessLayer objBusinessLayer = new BusinessLayer(ls);

            IList<IDName> objProjectModelList = null;
            try
            {
                objProjectModelList = objBusinessLayer.ProjectModelRepository.GetPartial<IDName>(x => new IDName { ID = x.ID, Name = x.Name });
            }
            catch
            {
                throw;
            }
            finally
            {
                ls = null;
                objBusinessLayer.Dispose();
            }

            return objProjectModelList;
        }

        #endregion

        [HttpGet, Route("v1/ProjectModel/GetAllIDName")]
        [ResponseType(typeof(IList<IDName>))]
        public JsonResult<IList<IDName>> GetAllIDName()
        {
            IList<IDName> objProjectModelList = null;

            try
            {
                objProjectModelList = this.GetProjectModelIDNameList();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(objProjectModelList, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        }

        /// <summary>
        /// GetById
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>IHttpActionResult></returns>
        [HttpGet, Route("v1/ProjectModel/GetById/{id}")]
        [ResponseType(typeof(ProjectModel))]
        public JsonResult<ProjectModelDTO> GetById(int id)
        {
            JsonResult<ProjectModelDTO> result = null;
            ProjectModelDTO objProjectModelDTO;

            try
            {
                objProjectModelDTO = this.GetProjectModelById(id);

                result = Json(objProjectModelDTO, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return result;
        }

        /// <summary>
        /// GetAllPaged
        /// </summary>
        /// <returns>IHttpActionResult></returns>
        [HttpGet, Route("v1/ProjectModel/GetAllPaged/{startingRecordNumber}/{pageSize}")]
        [ResponseType(typeof(DataCollection))]
        public JsonResult<DataCollection> GetAllPaged(int startingRecordNumber, int pageSize)
        {
            int totalRecords = 0;
            IList<ProjectModelDTO> objProjectModelDTOList = this.GetAllProjectModel(startingRecordNumber, pageSize, out totalRecords);

            DataCollection objDataCollection;

            try
            {
                objDataCollection = new DataCollection { TotalRecords = totalRecords, EntitySummary = new List<IBaseObject>() };
                if (null != objProjectModelDTOList)
                {
                    foreach (ProjectModelDTO objProjectModel in objProjectModelDTOList)
                    {
                        objDataCollection.EntitySummary.Add(objProjectModel);
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(objDataCollection, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        }

        /// <summary>
        /// CreateProjectModel
        /// </summary>
        /// <param name="ProjectModelDTO">ProjectModelDTO</param>
        /// <returns>JsonResult<string></returns>
        [HttpPost, Route("v1/ProjectModel/CreateProjectModel")]
        [ResponseType(typeof(string))]
        public JsonResult<string> CreateProjectModel([FromBody]ProjectModelDTO ProjectModelDTO)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {
                result = Json(this.AddNewProjectModel(ProjectModelDTO), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// UpdateProjectModel
        /// </summary>
        /// <param name="ID">int</param>
        /// <param name="ProjectModelDTO">ProjectModelDTO</param>
        /// <returns>JsonResult<string></returns>
        [ResponseType(typeof(string))]
        [HttpPut, Route("v1/ProjectModel/UpdateProjectModel/{ID}")]
        [ResponseType(typeof(string))]
        public JsonResult<string> UpdateProjectModel(int ID, [FromBody]ProjectModelDTO ProjectModelDTO)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {
                result = Json(this.ModifyProjectModel(ID, ProjectModelDTO), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// DeleteProjectModel
        /// </summary>
        /// <param name="ID">int</param>
        /// <returns>JsonResult<string></returns>
        [ResponseType(typeof(string))]
        [HttpDelete, Route("v1/ProjectModel/DeleteProjectModel/{ID}")]
        public JsonResult<string> DeleteProjectModel(int ID)
        {
            JsonResult<string> result = Json(string.Empty);
            try
            {

                result = Json(this.RemoveProjectModel(ID), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {
                result = Json(String.Format("Error - {0}", ex.Message), new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }

            return result;
        }

        /// <summary>
        /// Dispose
        /// </summary>
        /// <param name="disposing">bool</param>
        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

    }
}
